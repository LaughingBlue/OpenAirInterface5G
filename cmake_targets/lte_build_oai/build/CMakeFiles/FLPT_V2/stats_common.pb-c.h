/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: stats_common.proto */

#ifndef PROTOBUF_C_stats_5fcommon_2eproto__INCLUDED
#define PROTOBUF_C_stats_5fcommon_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Protocol__FlexRlcBsr Protocol__FlexRlcBsr;
typedef struct _Protocol__FlexCsiP10 Protocol__FlexCsiP10;
typedef struct _Protocol__FlexCsiP11 Protocol__FlexCsiP11;
typedef struct _Protocol__FlexCsiP20 Protocol__FlexCsiP20;
typedef struct _Protocol__FlexCsiP21 Protocol__FlexCsiP21;
typedef struct _Protocol__FlexCsiA12 Protocol__FlexCsiA12;
typedef struct _Protocol__FlexCsiA22 Protocol__FlexCsiA22;
typedef struct _Protocol__FlexCsiA20 Protocol__FlexCsiA20;
typedef struct _Protocol__FlexCsiA30 Protocol__FlexCsiA30;
typedef struct _Protocol__FlexCsiA31 Protocol__FlexCsiA31;
typedef struct _Protocol__FlexMsbCqi Protocol__FlexMsbCqi;
typedef struct _Protocol__FlexDlCsi Protocol__FlexDlCsi;
typedef struct _Protocol__FlexDlCqiReport Protocol__FlexDlCqiReport;
typedef struct _Protocol__FlexPagingInfo Protocol__FlexPagingInfo;
typedef struct _Protocol__FlexPagingBufferReport Protocol__FlexPagingBufferReport;
typedef struct _Protocol__FlexUlCqi Protocol__FlexUlCqi;
typedef struct _Protocol__FlexUlCqiReport Protocol__FlexUlCqiReport;
typedef struct _Protocol__FlexPucchDbm Protocol__FlexPucchDbm;
typedef struct _Protocol__FlexNoiseInterferenceReport Protocol__FlexNoiseInterferenceReport;
typedef struct _Protocol__FlexRrcMeasurements Protocol__FlexRrcMeasurements;
typedef struct _Protocol__FlexNeighCellsMeasurements Protocol__FlexNeighCellsMeasurements;
typedef struct _Protocol__FlexEutraMeasurements Protocol__FlexEutraMeasurements;
typedef struct _Protocol__FlexEutraCgiMeasurements Protocol__FlexEutraCgiMeasurements;
typedef struct _Protocol__FlexCellGlobalEutraId Protocol__FlexCellGlobalEutraId;
typedef struct _Protocol__FlexPlmnIdentity Protocol__FlexPlmnIdentity;
typedef struct _Protocol__FlexEutraRefSignalMeas Protocol__FlexEutraRefSignalMeas;
typedef struct _Protocol__FlexPdcpStats Protocol__FlexPdcpStats;
typedef struct _Protocol__FlexMacStats Protocol__FlexMacStats;
typedef struct _Protocol__FlexMacSdusDl Protocol__FlexMacSdusDl;


/* --- enums --- */

/*
 * Flags for MAC Control Elements
 */
typedef enum _Protocol__FlexCeType {
  PROTOCOL__FLEX_CE_TYPE__FLPCET_TA = 1,
  PROTOCOL__FLEX_CE_TYPE__FLPCET_DRX = 2,
  PROTOCOL__FLEX_CE_TYPE__FLPCET_CR = 4,
  PROTOCOL__FLEX_CE_TYPE__FLPCET_CA = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEX_CE_TYPE)
} Protocol__FlexCeType;
/*
 * Types of DL CSI reports
 */
typedef enum _Protocol__FlexCsiType {
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_P10 = 0,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_P11 = 1,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_P20 = 2,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_P21 = 3,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_A12 = 4,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_A22 = 5,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_A20 = 6,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_A30 = 7,
  PROTOCOL__FLEX_CSI_TYPE__FLCSIT_A31 = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEX_CSI_TYPE)
} Protocol__FlexCsiType;
/*
 * The type of UL CQI
 */
typedef enum _Protocol__FlexUlCqiType {
  PROTOCOL__FLEX_UL_CQI_TYPE__FLUCT_SRS = 0,
  PROTOCOL__FLEX_UL_CQI_TYPE__FLUCT_PUSCH = 1,
  PROTOCOL__FLEX_UL_CQI_TYPE__FLUCT_PUCCH_1 = 2,
  PROTOCOL__FLEX_UL_CQI_TYPE__FLUCT_PUCCH_2 = 3,
  PROTOCOL__FLEX_UL_CQI_TYPE__FLUCT_PRACH = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEX_UL_CQI_TYPE)
} Protocol__FlexUlCqiType;

/* --- messages --- */

/*
 * RLC buffer status for a specific logical channel of a UE
 */
struct  _Protocol__FlexRlcBsr
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lc_id;
  uint32_t lc_id;
  protobuf_c_boolean has_tx_queue_size;
  uint32_t tx_queue_size;
  protobuf_c_boolean has_tx_queue_hol_delay;
  uint32_t tx_queue_hol_delay;
  protobuf_c_boolean has_retransmission_queue_size;
  uint32_t retransmission_queue_size;
  protobuf_c_boolean has_retransmission_queue_hol_delay;
  uint32_t retransmission_queue_hol_delay;
  protobuf_c_boolean has_status_pdu_size;
  uint32_t status_pdu_size;
};
#define PROTOCOL__FLEX_RLC_BSR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_rlc_bsr__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * CSI type P10
 */
struct  _Protocol__FlexCsiP10
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
};
#define PROTOCOL__FLEX_CSI_P10__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_p10__descriptor) \
    , 0, 0 }


/*
 * CSI type P11
 */
struct  _Protocol__FlexCsiP11
{
  ProtobufCMessage base;
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
};
#define PROTOCOL__FLEX_CSI_P11__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_p11__descriptor) \
    , 0,NULL, 0, 0 }


/*
 * CSI type P20
 */
struct  _Protocol__FlexCsiP20
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
  protobuf_c_boolean has_sb_cqi;
  uint32_t sb_cqi;
  protobuf_c_boolean has_bandwidth_part_index;
  uint32_t bandwidth_part_index;
  protobuf_c_boolean has_sb_index;
  uint32_t sb_index;
};
#define PROTOCOL__FLEX_CSI_P20__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_p20__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * CSI type P21
 */
struct  _Protocol__FlexCsiP21
{
  ProtobufCMessage base;
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
  protobuf_c_boolean has_badwidth_part_index;
  uint32_t badwidth_part_index;
  protobuf_c_boolean has_sb_index;
  uint32_t sb_index;
};
#define PROTOCOL__FLEX_CSI_P21__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_p21__descriptor) \
    , 0,NULL, 0, 0, 0,NULL, 0, 0, 0, 0 }


/*
 * CSI type A12
 */
struct  _Protocol__FlexCsiA12
{
  ProtobufCMessage base;
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  size_t n_sb_pmi;
  uint32_t *sb_pmi;
};
#define PROTOCOL__FLEX_CSI_A12__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_a12__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * CSI type A22
 */
struct  _Protocol__FlexCsiA22
{
  ProtobufCMessage base;
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
  protobuf_c_boolean has_sb_pmi;
  uint32_t sb_pmi;
  size_t n_sb_list;
  uint32_t *sb_list;
};
#define PROTOCOL__FLEX_CSI_A22__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_a22__descriptor) \
    , 0,NULL, 0,NULL, 0, 0, 0, 0, 0,NULL }


/*
 * CSI type A20
 */
struct  _Protocol__FlexCsiA20
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
  protobuf_c_boolean has_sb_cqi;
  uint32_t sb_cqi;
  size_t n_sb_list;
  uint32_t *sb_list;
};
#define PROTOCOL__FLEX_CSI_A20__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_a20__descriptor) \
    , 0, 0, 0, 0, 0,NULL }


/*
 * CSI type A30
 */
struct  _Protocol__FlexCsiA30
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
};
#define PROTOCOL__FLEX_CSI_A30__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_a30__descriptor) \
    , 0, 0, 0,NULL }


/*
 * CSI type A31
 */
struct  _Protocol__FlexCsiA31
{
  ProtobufCMessage base;
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  size_t n_sb_cqi;
  Protocol__FlexMsbCqi **sb_cqi;
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
};
#define PROTOCOL__FLEX_CSI_A31__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_csi_a31__descriptor) \
    , 0,NULL, 0,NULL, 0, 0 }


/*
 * The CQI for the M-preffered subband
 */
struct  _Protocol__FlexMsbCqi
{
  ProtobufCMessage base;
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
};
#define PROTOCOL__FLEX_MSB_CQI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_msb_cqi__descriptor) \
    , 0,NULL }


typedef enum {
  PROTOCOL__FLEX_DL_CSI__REPORT__NOT_SET = 0,
  PROTOCOL__FLEX_DL_CSI__REPORT_P10CSI = 4,
  PROTOCOL__FLEX_DL_CSI__REPORT_P11CSI = 5,
  PROTOCOL__FLEX_DL_CSI__REPORT_P20CSI = 6,
  PROTOCOL__FLEX_DL_CSI__REPORT_P21CSI = 7,
  PROTOCOL__FLEX_DL_CSI__REPORT_A12CSI = 8,
  PROTOCOL__FLEX_DL_CSI__REPORT_A22CSI = 9,
  PROTOCOL__FLEX_DL_CSI__REPORT_A20CSI = 10,
  PROTOCOL__FLEX_DL_CSI__REPORT_A30CSI = 11,
  PROTOCOL__FLEX_DL_CSI__REPORT_A31CSI = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEX_DL_CSI__REPORT)
} Protocol__FlexDlCsi__ReportCase;

/*
 * The CSI report of the UE for a specific servCellIndex
 */
struct  _Protocol__FlexDlCsi
{
  ProtobufCMessage base;
  protobuf_c_boolean has_serv_cell_index;
  uint32_t serv_cell_index;
  protobuf_c_boolean has_ri;
  uint32_t ri;
  protobuf_c_boolean has_type;
  Protocol__FlexCsiType type;
  Protocol__FlexDlCsi__ReportCase report_case;
  union {
    Protocol__FlexCsiP10 *p10csi;
    Protocol__FlexCsiP11 *p11csi;
    Protocol__FlexCsiP20 *p20csi;
    Protocol__FlexCsiP21 *p21csi;
    Protocol__FlexCsiA12 *a12csi;
    Protocol__FlexCsiA22 *a22csi;
    Protocol__FlexCsiA20 *a20csi;
    Protocol__FlexCsiA30 *a30csi;
    Protocol__FlexCsiA31 *a31csi;
  };
};
#define PROTOCOL__FLEX_DL_CSI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_dl_csi__descriptor) \
    , 0, 0, 0, 0, 0, PROTOCOL__FLEX_CSI_TYPE__FLCSIT_P10, PROTOCOL__FLEX_DL_CSI__REPORT__NOT_SET, {0} }


/*
 * The full DL CQI report for all CC of a UE
 */
struct  _Protocol__FlexDlCqiReport
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sfn_sn;
  uint32_t sfn_sn;
  size_t n_csi_report;
  Protocol__FlexDlCsi **csi_report;
};
#define PROTOCOL__FLEX_DL_CQI_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_dl_cqi_report__descriptor) \
    , 0, 0, 0,NULL }


/*
 * Paging message info
 */
struct  _Protocol__FlexPagingInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_paging_index;
  uint32_t paging_index;
  protobuf_c_boolean has_paging_message_size;
  uint32_t paging_message_size;
  protobuf_c_boolean has_paging_subframe;
  uint32_t paging_subframe;
  protobuf_c_boolean has_carrier_index;
  uint32_t carrier_index;
};
#define PROTOCOL__FLEX_PAGING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_paging_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Report for the paging buffer status
 */
struct  _Protocol__FlexPagingBufferReport
{
  ProtobufCMessage base;
  size_t n_paging_info;
  Protocol__FlexPagingInfo **paging_info;
};
#define PROTOCOL__FLEX_PAGING_BUFFER_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_paging_buffer_report__descriptor) \
    , 0,NULL }


/*
 * UL CQI report for a specific UE for a given report type
 */
struct  _Protocol__FlexUlCqi
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  Protocol__FlexUlCqiType type;
  size_t n_sinr;
  uint32_t *sinr;
  protobuf_c_boolean has_serv_cell_index;
  uint32_t serv_cell_index;
};
#define PROTOCOL__FLEX_UL_CQI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ul_cqi__descriptor) \
    , 0, PROTOCOL__FLEX_UL_CQI_TYPE__FLUCT_SRS, 0,NULL, 0, 0 }


/*
 * Full UL CQI report for a specific UE
 */
struct  _Protocol__FlexUlCqiReport
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sfn_sn;
  uint32_t sfn_sn;
  size_t n_cqi_meas;
  Protocol__FlexUlCqi **cqi_meas;
  size_t n_pucch_dbm;
  Protocol__FlexPucchDbm **pucch_dbm;
};
#define PROTOCOL__FLEX_UL_CQI_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ul_cqi_report__descriptor) \
    , 0, 0, 0,NULL, 0,NULL }


struct  _Protocol__FlexPucchDbm
{
  ProtobufCMessage base;
  protobuf_c_boolean has_p0_pucch_dbm;
  int32_t p0_pucch_dbm;
  protobuf_c_boolean has_serv_cell_index;
  uint32_t serv_cell_index;
  protobuf_c_boolean has_p0_pucch_updated;
  uint32_t p0_pucch_updated;
};
#define PROTOCOL__FLEX_PUCCH_DBM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_pucch_dbm__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * The UL noise and interference report for a UE
 */
struct  _Protocol__FlexNoiseInterferenceReport
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sfn_sf;
  uint32_t sfn_sf;
  protobuf_c_boolean has_rip;
  uint32_t rip;
  protobuf_c_boolean has_tnp;
  uint32_t tnp;
  protobuf_c_boolean has_p0_nominal_pucch;
  int32_t p0_nominal_pucch;
};
#define PROTOCOL__FLEX_NOISE_INTERFERENCE_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_noise_interference_report__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Protocol__FlexRrcMeasurements
{
  ProtobufCMessage base;
  /*
   * Measurement identifier.
   */
  protobuf_c_boolean has_measid;
  int32_t measid;
  /*
   * Primary Cell Reference Signal Received Power (RSRP).
   */
  protobuf_c_boolean has_pcell_rsrp;
  int32_t pcell_rsrp;
  /*
   * Primary Cell Reference Signal Received Quality (RSRQ).
   */
  protobuf_c_boolean has_pcell_rsrq;
  int32_t pcell_rsrq;
  /*
   * Neighboring cells measurements performed by UE.
   */
  Protocol__FlexNeighCellsMeasurements *neigh_meas;
};
#define PROTOCOL__FLEX_RRC_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_rrc_measurements__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL }


struct  _Protocol__FlexNeighCellsMeasurements
{
  ProtobufCMessage base;
  /*
   * Neighboring EUTRA cells measurements.
   */
  size_t n_eutra_meas;
  Protocol__FlexEutraMeasurements **eutra_meas;
};
#define PROTOCOL__FLEX_NEIGH_CELLS_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_neigh_cells_measurements__descriptor) \
    , 0,NULL }


struct  _Protocol__FlexEutraMeasurements
{
  ProtobufCMessage base;
  /*
   * Physical Cell identifier.
   */
  protobuf_c_boolean has_phys_cell_id;
  int32_t phys_cell_id;
  /*
   * EUTRA Cell Global Identity (CGI) measurement.
   */
  Protocol__FlexEutraCgiMeasurements *cgi_meas;
  /*
   * EUTRA nearby cell reference signal measurement.
   */
  Protocol__FlexEutraRefSignalMeas *meas_result;
};
#define PROTOCOL__FLEX_EUTRA_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_eutra_measurements__descriptor) \
    , 0, 0, NULL, NULL }


struct  _Protocol__FlexEutraCgiMeasurements
{
  ProtobufCMessage base;
  /*
   * EUTRA Cell Global Identity (CGI).
   */
  Protocol__FlexCellGlobalEutraId *cgi;
  /*
   * Tracking area code of the neighbor cell.
   */
  protobuf_c_boolean has_tracking_area_code;
  uint32_t tracking_area_code;
  /*
   * Public land mobile network identifiers of neighbor cell.
   */
  size_t n_plmn_id;
  Protocol__FlexPlmnIdentity **plmn_id;
};
#define PROTOCOL__FLEX_EUTRA_CGI_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_eutra_cgi_measurements__descriptor) \
    , NULL, 0, 0, 0,NULL }


struct  _Protocol__FlexCellGlobalEutraId
{
  ProtobufCMessage base;
  /*
   * Public land mobile network identifier of neighbor cell.
   */
  Protocol__FlexPlmnIdentity *plmn_id;
  /*
   * Cell identifier of neighbor cell.
   */
  protobuf_c_boolean has_cell_id;
  uint32_t cell_id;
};
#define PROTOCOL__FLEX_CELL_GLOBAL_EUTRA_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_cell_global_eutra_id__descriptor) \
    , NULL, 0, 0 }


struct  _Protocol__FlexPlmnIdentity
{
  ProtobufCMessage base;
  /*
   * Mobile Network Code (MNC).
   */
  size_t n_mnc;
  uint32_t *mnc;
  /*
   * Mobile Country Code (MCC).
   */
  size_t n_mcc;
  uint32_t *mcc;
  /*
   * tracking area code 
   */
  size_t n_tac;
  uint32_t *tac;
};
#define PROTOCOL__FLEX_PLMN_IDENTITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_plmn_identity__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _Protocol__FlexEutraRefSignalMeas
{
  ProtobufCMessage base;
  /*
   * Neighboring Cell RSRP
   */
  protobuf_c_boolean has_rsrp;
  int32_t rsrp;
  /*
   * Neighboring Cell RSRQ	
   */
  protobuf_c_boolean has_rsrq;
  int32_t rsrq;
};
#define PROTOCOL__FLEX_EUTRA_REF_SIGNAL_MEAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_eutra_ref_signal_meas__descriptor) \
    , 0, 0, 0, 0 }


struct  _Protocol__FlexPdcpStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pkt_tx;
  uint32_t pkt_tx;
  protobuf_c_boolean has_pkt_tx_bytes;
  uint32_t pkt_tx_bytes;
  protobuf_c_boolean has_pkt_tx_sn;
  uint32_t pkt_tx_sn;
  protobuf_c_boolean has_pkt_tx_w;
  uint32_t pkt_tx_w;
  protobuf_c_boolean has_pkt_tx_bytes_w;
  uint32_t pkt_tx_bytes_w;
  protobuf_c_boolean has_pkt_tx_aiat;
  uint32_t pkt_tx_aiat;
  protobuf_c_boolean has_pkt_tx_aiat_w;
  uint32_t pkt_tx_aiat_w;
  protobuf_c_boolean has_pkt_rx;
  uint32_t pkt_rx;
  protobuf_c_boolean has_pkt_rx_bytes;
  uint32_t pkt_rx_bytes;
  protobuf_c_boolean has_pkt_rx_sn;
  uint32_t pkt_rx_sn;
  protobuf_c_boolean has_pkt_rx_w;
  uint32_t pkt_rx_w;
  protobuf_c_boolean has_pkt_rx_bytes_w;
  uint32_t pkt_rx_bytes_w;
  protobuf_c_boolean has_pkt_rx_aiat;
  uint32_t pkt_rx_aiat;
  protobuf_c_boolean has_pkt_rx_aiat_w;
  uint32_t pkt_rx_aiat_w;
  protobuf_c_boolean has_pkt_rx_oo;
  uint32_t pkt_rx_oo;
  protobuf_c_boolean has_sfn;
  uint64_t sfn;
};
#define PROTOCOL__FLEX_PDCP_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_pdcp_stats__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Protocol__FlexMacStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tbs_dl;
  uint32_t tbs_dl;
  protobuf_c_boolean has_tbs_ul;
  uint32_t tbs_ul;
  protobuf_c_boolean has_prb_retx_dl;
  uint32_t prb_retx_dl;
  protobuf_c_boolean has_prb_retx_ul;
  uint32_t prb_retx_ul;
  protobuf_c_boolean has_prb_dl;
  uint32_t prb_dl;
  protobuf_c_boolean has_prb_ul;
  uint32_t prb_ul;
  protobuf_c_boolean has_mcs1_dl;
  uint32_t mcs1_dl;
  protobuf_c_boolean has_mcs2_dl;
  uint32_t mcs2_dl;
  protobuf_c_boolean has_mcs1_ul;
  uint32_t mcs1_ul;
  protobuf_c_boolean has_mcs2_ul;
  uint32_t mcs2_ul;
  protobuf_c_boolean has_total_bytes_sdus_ul;
  uint32_t total_bytes_sdus_ul;
  protobuf_c_boolean has_total_bytes_sdus_dl;
  uint32_t total_bytes_sdus_dl;
  protobuf_c_boolean has_total_prb_retx_dl;
  uint32_t total_prb_retx_dl;
  protobuf_c_boolean has_total_prb_retx_ul;
  uint32_t total_prb_retx_ul;
  protobuf_c_boolean has_total_prb_dl;
  uint32_t total_prb_dl;
  protobuf_c_boolean has_total_prb_ul;
  uint32_t total_prb_ul;
  protobuf_c_boolean has_total_pdu_dl;
  uint32_t total_pdu_dl;
  protobuf_c_boolean has_total_pdu_ul;
  uint32_t total_pdu_ul;
  protobuf_c_boolean has_total_tbs_dl;
  uint32_t total_tbs_dl;
  protobuf_c_boolean has_total_tbs_ul;
  uint32_t total_tbs_ul;
  size_t n_mac_sdus_dl;
  Protocol__FlexMacSdusDl **mac_sdus_dl;
  protobuf_c_boolean has_harq_round;
  uint32_t harq_round;
};
#define PROTOCOL__FLEX_MAC_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_mac_stats__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _Protocol__FlexMacSdusDl
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sdu_length;
  uint32_t sdu_length;
  protobuf_c_boolean has_lcid;
  uint32_t lcid;
};
#define PROTOCOL__FLEX_MAC_SDUS_DL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_mac_sdus_dl__descriptor) \
    , 0, 0, 0, 0 }


/* Protocol__FlexRlcBsr methods */
void   protocol__flex_rlc_bsr__init
                     (Protocol__FlexRlcBsr         *message);
size_t protocol__flex_rlc_bsr__get_packed_size
                     (const Protocol__FlexRlcBsr   *message);
size_t protocol__flex_rlc_bsr__pack
                     (const Protocol__FlexRlcBsr   *message,
                      uint8_t             *out);
size_t protocol__flex_rlc_bsr__pack_to_buffer
                     (const Protocol__FlexRlcBsr   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexRlcBsr *
       protocol__flex_rlc_bsr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_rlc_bsr__free_unpacked
                     (Protocol__FlexRlcBsr *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiP10 methods */
void   protocol__flex_csi_p10__init
                     (Protocol__FlexCsiP10         *message);
size_t protocol__flex_csi_p10__get_packed_size
                     (const Protocol__FlexCsiP10   *message);
size_t protocol__flex_csi_p10__pack
                     (const Protocol__FlexCsiP10   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_p10__pack_to_buffer
                     (const Protocol__FlexCsiP10   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiP10 *
       protocol__flex_csi_p10__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_p10__free_unpacked
                     (Protocol__FlexCsiP10 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiP11 methods */
void   protocol__flex_csi_p11__init
                     (Protocol__FlexCsiP11         *message);
size_t protocol__flex_csi_p11__get_packed_size
                     (const Protocol__FlexCsiP11   *message);
size_t protocol__flex_csi_p11__pack
                     (const Protocol__FlexCsiP11   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_p11__pack_to_buffer
                     (const Protocol__FlexCsiP11   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiP11 *
       protocol__flex_csi_p11__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_p11__free_unpacked
                     (Protocol__FlexCsiP11 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiP20 methods */
void   protocol__flex_csi_p20__init
                     (Protocol__FlexCsiP20         *message);
size_t protocol__flex_csi_p20__get_packed_size
                     (const Protocol__FlexCsiP20   *message);
size_t protocol__flex_csi_p20__pack
                     (const Protocol__FlexCsiP20   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_p20__pack_to_buffer
                     (const Protocol__FlexCsiP20   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiP20 *
       protocol__flex_csi_p20__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_p20__free_unpacked
                     (Protocol__FlexCsiP20 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiP21 methods */
void   protocol__flex_csi_p21__init
                     (Protocol__FlexCsiP21         *message);
size_t protocol__flex_csi_p21__get_packed_size
                     (const Protocol__FlexCsiP21   *message);
size_t protocol__flex_csi_p21__pack
                     (const Protocol__FlexCsiP21   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_p21__pack_to_buffer
                     (const Protocol__FlexCsiP21   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiP21 *
       protocol__flex_csi_p21__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_p21__free_unpacked
                     (Protocol__FlexCsiP21 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiA12 methods */
void   protocol__flex_csi_a12__init
                     (Protocol__FlexCsiA12         *message);
size_t protocol__flex_csi_a12__get_packed_size
                     (const Protocol__FlexCsiA12   *message);
size_t protocol__flex_csi_a12__pack
                     (const Protocol__FlexCsiA12   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_a12__pack_to_buffer
                     (const Protocol__FlexCsiA12   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiA12 *
       protocol__flex_csi_a12__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_a12__free_unpacked
                     (Protocol__FlexCsiA12 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiA22 methods */
void   protocol__flex_csi_a22__init
                     (Protocol__FlexCsiA22         *message);
size_t protocol__flex_csi_a22__get_packed_size
                     (const Protocol__FlexCsiA22   *message);
size_t protocol__flex_csi_a22__pack
                     (const Protocol__FlexCsiA22   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_a22__pack_to_buffer
                     (const Protocol__FlexCsiA22   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiA22 *
       protocol__flex_csi_a22__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_a22__free_unpacked
                     (Protocol__FlexCsiA22 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiA20 methods */
void   protocol__flex_csi_a20__init
                     (Protocol__FlexCsiA20         *message);
size_t protocol__flex_csi_a20__get_packed_size
                     (const Protocol__FlexCsiA20   *message);
size_t protocol__flex_csi_a20__pack
                     (const Protocol__FlexCsiA20   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_a20__pack_to_buffer
                     (const Protocol__FlexCsiA20   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiA20 *
       protocol__flex_csi_a20__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_a20__free_unpacked
                     (Protocol__FlexCsiA20 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiA30 methods */
void   protocol__flex_csi_a30__init
                     (Protocol__FlexCsiA30         *message);
size_t protocol__flex_csi_a30__get_packed_size
                     (const Protocol__FlexCsiA30   *message);
size_t protocol__flex_csi_a30__pack
                     (const Protocol__FlexCsiA30   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_a30__pack_to_buffer
                     (const Protocol__FlexCsiA30   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiA30 *
       protocol__flex_csi_a30__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_a30__free_unpacked
                     (Protocol__FlexCsiA30 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCsiA31 methods */
void   protocol__flex_csi_a31__init
                     (Protocol__FlexCsiA31         *message);
size_t protocol__flex_csi_a31__get_packed_size
                     (const Protocol__FlexCsiA31   *message);
size_t protocol__flex_csi_a31__pack
                     (const Protocol__FlexCsiA31   *message,
                      uint8_t             *out);
size_t protocol__flex_csi_a31__pack_to_buffer
                     (const Protocol__FlexCsiA31   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCsiA31 *
       protocol__flex_csi_a31__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_csi_a31__free_unpacked
                     (Protocol__FlexCsiA31 *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexMsbCqi methods */
void   protocol__flex_msb_cqi__init
                     (Protocol__FlexMsbCqi         *message);
size_t protocol__flex_msb_cqi__get_packed_size
                     (const Protocol__FlexMsbCqi   *message);
size_t protocol__flex_msb_cqi__pack
                     (const Protocol__FlexMsbCqi   *message,
                      uint8_t             *out);
size_t protocol__flex_msb_cqi__pack_to_buffer
                     (const Protocol__FlexMsbCqi   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexMsbCqi *
       protocol__flex_msb_cqi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_msb_cqi__free_unpacked
                     (Protocol__FlexMsbCqi *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexDlCsi methods */
void   protocol__flex_dl_csi__init
                     (Protocol__FlexDlCsi         *message);
size_t protocol__flex_dl_csi__get_packed_size
                     (const Protocol__FlexDlCsi   *message);
size_t protocol__flex_dl_csi__pack
                     (const Protocol__FlexDlCsi   *message,
                      uint8_t             *out);
size_t protocol__flex_dl_csi__pack_to_buffer
                     (const Protocol__FlexDlCsi   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexDlCsi *
       protocol__flex_dl_csi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_dl_csi__free_unpacked
                     (Protocol__FlexDlCsi *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexDlCqiReport methods */
void   protocol__flex_dl_cqi_report__init
                     (Protocol__FlexDlCqiReport         *message);
size_t protocol__flex_dl_cqi_report__get_packed_size
                     (const Protocol__FlexDlCqiReport   *message);
size_t protocol__flex_dl_cqi_report__pack
                     (const Protocol__FlexDlCqiReport   *message,
                      uint8_t             *out);
size_t protocol__flex_dl_cqi_report__pack_to_buffer
                     (const Protocol__FlexDlCqiReport   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexDlCqiReport *
       protocol__flex_dl_cqi_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_dl_cqi_report__free_unpacked
                     (Protocol__FlexDlCqiReport *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexPagingInfo methods */
void   protocol__flex_paging_info__init
                     (Protocol__FlexPagingInfo         *message);
size_t protocol__flex_paging_info__get_packed_size
                     (const Protocol__FlexPagingInfo   *message);
size_t protocol__flex_paging_info__pack
                     (const Protocol__FlexPagingInfo   *message,
                      uint8_t             *out);
size_t protocol__flex_paging_info__pack_to_buffer
                     (const Protocol__FlexPagingInfo   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexPagingInfo *
       protocol__flex_paging_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_paging_info__free_unpacked
                     (Protocol__FlexPagingInfo *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexPagingBufferReport methods */
void   protocol__flex_paging_buffer_report__init
                     (Protocol__FlexPagingBufferReport         *message);
size_t protocol__flex_paging_buffer_report__get_packed_size
                     (const Protocol__FlexPagingBufferReport   *message);
size_t protocol__flex_paging_buffer_report__pack
                     (const Protocol__FlexPagingBufferReport   *message,
                      uint8_t             *out);
size_t protocol__flex_paging_buffer_report__pack_to_buffer
                     (const Protocol__FlexPagingBufferReport   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexPagingBufferReport *
       protocol__flex_paging_buffer_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_paging_buffer_report__free_unpacked
                     (Protocol__FlexPagingBufferReport *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUlCqi methods */
void   protocol__flex_ul_cqi__init
                     (Protocol__FlexUlCqi         *message);
size_t protocol__flex_ul_cqi__get_packed_size
                     (const Protocol__FlexUlCqi   *message);
size_t protocol__flex_ul_cqi__pack
                     (const Protocol__FlexUlCqi   *message,
                      uint8_t             *out);
size_t protocol__flex_ul_cqi__pack_to_buffer
                     (const Protocol__FlexUlCqi   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUlCqi *
       protocol__flex_ul_cqi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ul_cqi__free_unpacked
                     (Protocol__FlexUlCqi *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUlCqiReport methods */
void   protocol__flex_ul_cqi_report__init
                     (Protocol__FlexUlCqiReport         *message);
size_t protocol__flex_ul_cqi_report__get_packed_size
                     (const Protocol__FlexUlCqiReport   *message);
size_t protocol__flex_ul_cqi_report__pack
                     (const Protocol__FlexUlCqiReport   *message,
                      uint8_t             *out);
size_t protocol__flex_ul_cqi_report__pack_to_buffer
                     (const Protocol__FlexUlCqiReport   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUlCqiReport *
       protocol__flex_ul_cqi_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ul_cqi_report__free_unpacked
                     (Protocol__FlexUlCqiReport *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexPucchDbm methods */
void   protocol__flex_pucch_dbm__init
                     (Protocol__FlexPucchDbm         *message);
size_t protocol__flex_pucch_dbm__get_packed_size
                     (const Protocol__FlexPucchDbm   *message);
size_t protocol__flex_pucch_dbm__pack
                     (const Protocol__FlexPucchDbm   *message,
                      uint8_t             *out);
size_t protocol__flex_pucch_dbm__pack_to_buffer
                     (const Protocol__FlexPucchDbm   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexPucchDbm *
       protocol__flex_pucch_dbm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_pucch_dbm__free_unpacked
                     (Protocol__FlexPucchDbm *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexNoiseInterferenceReport methods */
void   protocol__flex_noise_interference_report__init
                     (Protocol__FlexNoiseInterferenceReport         *message);
size_t protocol__flex_noise_interference_report__get_packed_size
                     (const Protocol__FlexNoiseInterferenceReport   *message);
size_t protocol__flex_noise_interference_report__pack
                     (const Protocol__FlexNoiseInterferenceReport   *message,
                      uint8_t             *out);
size_t protocol__flex_noise_interference_report__pack_to_buffer
                     (const Protocol__FlexNoiseInterferenceReport   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexNoiseInterferenceReport *
       protocol__flex_noise_interference_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_noise_interference_report__free_unpacked
                     (Protocol__FlexNoiseInterferenceReport *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexRrcMeasurements methods */
void   protocol__flex_rrc_measurements__init
                     (Protocol__FlexRrcMeasurements         *message);
size_t protocol__flex_rrc_measurements__get_packed_size
                     (const Protocol__FlexRrcMeasurements   *message);
size_t protocol__flex_rrc_measurements__pack
                     (const Protocol__FlexRrcMeasurements   *message,
                      uint8_t             *out);
size_t protocol__flex_rrc_measurements__pack_to_buffer
                     (const Protocol__FlexRrcMeasurements   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexRrcMeasurements *
       protocol__flex_rrc_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_rrc_measurements__free_unpacked
                     (Protocol__FlexRrcMeasurements *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexNeighCellsMeasurements methods */
void   protocol__flex_neigh_cells_measurements__init
                     (Protocol__FlexNeighCellsMeasurements         *message);
size_t protocol__flex_neigh_cells_measurements__get_packed_size
                     (const Protocol__FlexNeighCellsMeasurements   *message);
size_t protocol__flex_neigh_cells_measurements__pack
                     (const Protocol__FlexNeighCellsMeasurements   *message,
                      uint8_t             *out);
size_t protocol__flex_neigh_cells_measurements__pack_to_buffer
                     (const Protocol__FlexNeighCellsMeasurements   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexNeighCellsMeasurements *
       protocol__flex_neigh_cells_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_neigh_cells_measurements__free_unpacked
                     (Protocol__FlexNeighCellsMeasurements *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEutraMeasurements methods */
void   protocol__flex_eutra_measurements__init
                     (Protocol__FlexEutraMeasurements         *message);
size_t protocol__flex_eutra_measurements__get_packed_size
                     (const Protocol__FlexEutraMeasurements   *message);
size_t protocol__flex_eutra_measurements__pack
                     (const Protocol__FlexEutraMeasurements   *message,
                      uint8_t             *out);
size_t protocol__flex_eutra_measurements__pack_to_buffer
                     (const Protocol__FlexEutraMeasurements   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEutraMeasurements *
       protocol__flex_eutra_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_eutra_measurements__free_unpacked
                     (Protocol__FlexEutraMeasurements *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEutraCgiMeasurements methods */
void   protocol__flex_eutra_cgi_measurements__init
                     (Protocol__FlexEutraCgiMeasurements         *message);
size_t protocol__flex_eutra_cgi_measurements__get_packed_size
                     (const Protocol__FlexEutraCgiMeasurements   *message);
size_t protocol__flex_eutra_cgi_measurements__pack
                     (const Protocol__FlexEutraCgiMeasurements   *message,
                      uint8_t             *out);
size_t protocol__flex_eutra_cgi_measurements__pack_to_buffer
                     (const Protocol__FlexEutraCgiMeasurements   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEutraCgiMeasurements *
       protocol__flex_eutra_cgi_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_eutra_cgi_measurements__free_unpacked
                     (Protocol__FlexEutraCgiMeasurements *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexCellGlobalEutraId methods */
void   protocol__flex_cell_global_eutra_id__init
                     (Protocol__FlexCellGlobalEutraId         *message);
size_t protocol__flex_cell_global_eutra_id__get_packed_size
                     (const Protocol__FlexCellGlobalEutraId   *message);
size_t protocol__flex_cell_global_eutra_id__pack
                     (const Protocol__FlexCellGlobalEutraId   *message,
                      uint8_t             *out);
size_t protocol__flex_cell_global_eutra_id__pack_to_buffer
                     (const Protocol__FlexCellGlobalEutraId   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexCellGlobalEutraId *
       protocol__flex_cell_global_eutra_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_cell_global_eutra_id__free_unpacked
                     (Protocol__FlexCellGlobalEutraId *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexPlmnIdentity methods */
void   protocol__flex_plmn_identity__init
                     (Protocol__FlexPlmnIdentity         *message);
size_t protocol__flex_plmn_identity__get_packed_size
                     (const Protocol__FlexPlmnIdentity   *message);
size_t protocol__flex_plmn_identity__pack
                     (const Protocol__FlexPlmnIdentity   *message,
                      uint8_t             *out);
size_t protocol__flex_plmn_identity__pack_to_buffer
                     (const Protocol__FlexPlmnIdentity   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexPlmnIdentity *
       protocol__flex_plmn_identity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_plmn_identity__free_unpacked
                     (Protocol__FlexPlmnIdentity *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEutraRefSignalMeas methods */
void   protocol__flex_eutra_ref_signal_meas__init
                     (Protocol__FlexEutraRefSignalMeas         *message);
size_t protocol__flex_eutra_ref_signal_meas__get_packed_size
                     (const Protocol__FlexEutraRefSignalMeas   *message);
size_t protocol__flex_eutra_ref_signal_meas__pack
                     (const Protocol__FlexEutraRefSignalMeas   *message,
                      uint8_t             *out);
size_t protocol__flex_eutra_ref_signal_meas__pack_to_buffer
                     (const Protocol__FlexEutraRefSignalMeas   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEutraRefSignalMeas *
       protocol__flex_eutra_ref_signal_meas__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_eutra_ref_signal_meas__free_unpacked
                     (Protocol__FlexEutraRefSignalMeas *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexPdcpStats methods */
void   protocol__flex_pdcp_stats__init
                     (Protocol__FlexPdcpStats         *message);
size_t protocol__flex_pdcp_stats__get_packed_size
                     (const Protocol__FlexPdcpStats   *message);
size_t protocol__flex_pdcp_stats__pack
                     (const Protocol__FlexPdcpStats   *message,
                      uint8_t             *out);
size_t protocol__flex_pdcp_stats__pack_to_buffer
                     (const Protocol__FlexPdcpStats   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexPdcpStats *
       protocol__flex_pdcp_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_pdcp_stats__free_unpacked
                     (Protocol__FlexPdcpStats *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexMacStats methods */
void   protocol__flex_mac_stats__init
                     (Protocol__FlexMacStats         *message);
size_t protocol__flex_mac_stats__get_packed_size
                     (const Protocol__FlexMacStats   *message);
size_t protocol__flex_mac_stats__pack
                     (const Protocol__FlexMacStats   *message,
                      uint8_t             *out);
size_t protocol__flex_mac_stats__pack_to_buffer
                     (const Protocol__FlexMacStats   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexMacStats *
       protocol__flex_mac_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_mac_stats__free_unpacked
                     (Protocol__FlexMacStats *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexMacSdusDl methods */
void   protocol__flex_mac_sdus_dl__init
                     (Protocol__FlexMacSdusDl         *message);
size_t protocol__flex_mac_sdus_dl__get_packed_size
                     (const Protocol__FlexMacSdusDl   *message);
size_t protocol__flex_mac_sdus_dl__pack
                     (const Protocol__FlexMacSdusDl   *message,
                      uint8_t             *out);
size_t protocol__flex_mac_sdus_dl__pack_to_buffer
                     (const Protocol__FlexMacSdusDl   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexMacSdusDl *
       protocol__flex_mac_sdus_dl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_mac_sdus_dl__free_unpacked
                     (Protocol__FlexMacSdusDl *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__FlexRlcBsr_Closure)
                 (const Protocol__FlexRlcBsr *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiP10_Closure)
                 (const Protocol__FlexCsiP10 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiP11_Closure)
                 (const Protocol__FlexCsiP11 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiP20_Closure)
                 (const Protocol__FlexCsiP20 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiP21_Closure)
                 (const Protocol__FlexCsiP21 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiA12_Closure)
                 (const Protocol__FlexCsiA12 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiA22_Closure)
                 (const Protocol__FlexCsiA22 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiA20_Closure)
                 (const Protocol__FlexCsiA20 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiA30_Closure)
                 (const Protocol__FlexCsiA30 *message,
                  void *closure_data);
typedef void (*Protocol__FlexCsiA31_Closure)
                 (const Protocol__FlexCsiA31 *message,
                  void *closure_data);
typedef void (*Protocol__FlexMsbCqi_Closure)
                 (const Protocol__FlexMsbCqi *message,
                  void *closure_data);
typedef void (*Protocol__FlexDlCsi_Closure)
                 (const Protocol__FlexDlCsi *message,
                  void *closure_data);
typedef void (*Protocol__FlexDlCqiReport_Closure)
                 (const Protocol__FlexDlCqiReport *message,
                  void *closure_data);
typedef void (*Protocol__FlexPagingInfo_Closure)
                 (const Protocol__FlexPagingInfo *message,
                  void *closure_data);
typedef void (*Protocol__FlexPagingBufferReport_Closure)
                 (const Protocol__FlexPagingBufferReport *message,
                  void *closure_data);
typedef void (*Protocol__FlexUlCqi_Closure)
                 (const Protocol__FlexUlCqi *message,
                  void *closure_data);
typedef void (*Protocol__FlexUlCqiReport_Closure)
                 (const Protocol__FlexUlCqiReport *message,
                  void *closure_data);
typedef void (*Protocol__FlexPucchDbm_Closure)
                 (const Protocol__FlexPucchDbm *message,
                  void *closure_data);
typedef void (*Protocol__FlexNoiseInterferenceReport_Closure)
                 (const Protocol__FlexNoiseInterferenceReport *message,
                  void *closure_data);
typedef void (*Protocol__FlexRrcMeasurements_Closure)
                 (const Protocol__FlexRrcMeasurements *message,
                  void *closure_data);
typedef void (*Protocol__FlexNeighCellsMeasurements_Closure)
                 (const Protocol__FlexNeighCellsMeasurements *message,
                  void *closure_data);
typedef void (*Protocol__FlexEutraMeasurements_Closure)
                 (const Protocol__FlexEutraMeasurements *message,
                  void *closure_data);
typedef void (*Protocol__FlexEutraCgiMeasurements_Closure)
                 (const Protocol__FlexEutraCgiMeasurements *message,
                  void *closure_data);
typedef void (*Protocol__FlexCellGlobalEutraId_Closure)
                 (const Protocol__FlexCellGlobalEutraId *message,
                  void *closure_data);
typedef void (*Protocol__FlexPlmnIdentity_Closure)
                 (const Protocol__FlexPlmnIdentity *message,
                  void *closure_data);
typedef void (*Protocol__FlexEutraRefSignalMeas_Closure)
                 (const Protocol__FlexEutraRefSignalMeas *message,
                  void *closure_data);
typedef void (*Protocol__FlexPdcpStats_Closure)
                 (const Protocol__FlexPdcpStats *message,
                  void *closure_data);
typedef void (*Protocol__FlexMacStats_Closure)
                 (const Protocol__FlexMacStats *message,
                  void *closure_data);
typedef void (*Protocol__FlexMacSdusDl_Closure)
                 (const Protocol__FlexMacSdusDl *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    protocol__flex_ce_type__descriptor;
extern const ProtobufCEnumDescriptor    protocol__flex_csi_type__descriptor;
extern const ProtobufCEnumDescriptor    protocol__flex_ul_cqi_type__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_rlc_bsr__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_p10__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_p11__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_p20__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_p21__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_a12__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_a22__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_a20__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_a30__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_csi_a31__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_msb_cqi__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_dl_csi__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_dl_cqi_report__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_paging_info__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_paging_buffer_report__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ul_cqi__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ul_cqi_report__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_pucch_dbm__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_noise_interference_report__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_rrc_measurements__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_neigh_cells_measurements__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_eutra_measurements__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_eutra_cgi_measurements__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_cell_global_eutra_id__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_plmn_identity__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_eutra_ref_signal_meas__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_pdcp_stats__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_mac_stats__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_mac_sdus_dl__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_stats_5fcommon_2eproto__INCLUDED */
