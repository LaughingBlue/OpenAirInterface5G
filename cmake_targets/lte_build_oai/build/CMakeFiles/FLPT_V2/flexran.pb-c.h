/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: flexran.proto */

#ifndef PROTOBUF_C_flexran_2eproto__INCLUDED
#define PROTOBUF_C_flexran_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "stats_messages.pb-c.h"
#include "header.pb-c.h"
#include "time_common.pb-c.h"
#include "config_messages.pb-c.h"
#include "controller_commands.pb-c.h"
#include "control_delegation.pb-c.h"

typedef struct _Protocol__FlexranMessage Protocol__FlexranMessage;
typedef struct _Protocol__FlexHello Protocol__FlexHello;
typedef struct _Protocol__FlexEchoRequest Protocol__FlexEchoRequest;
typedef struct _Protocol__FlexEchoReply Protocol__FlexEchoReply;
typedef struct _Protocol__FlexStatsRequest Protocol__FlexStatsRequest;
typedef struct _Protocol__FlexStatsReply Protocol__FlexStatsReply;
typedef struct _Protocol__FlexSfTrigger Protocol__FlexSfTrigger;
typedef struct _Protocol__FlexUlSrInfo Protocol__FlexUlSrInfo;
typedef struct _Protocol__FlexEnbConfigRequest Protocol__FlexEnbConfigRequest;
typedef struct _Protocol__FlexEnbConfigReply Protocol__FlexEnbConfigReply;
typedef struct _Protocol__FlexUeConfigRequest Protocol__FlexUeConfigRequest;
typedef struct _Protocol__FlexUeConfigReply Protocol__FlexUeConfigReply;
typedef struct _Protocol__FlexLcConfigRequest Protocol__FlexLcConfigRequest;
typedef struct _Protocol__FlexLcConfigReply Protocol__FlexLcConfigReply;
typedef struct _Protocol__FlexDlMacConfig Protocol__FlexDlMacConfig;
typedef struct _Protocol__FlexUlMacConfig Protocol__FlexUlMacConfig;
typedef struct _Protocol__FlexRrcTriggering Protocol__FlexRrcTriggering;
typedef struct _Protocol__FlexUeStateChange Protocol__FlexUeStateChange;
typedef struct _Protocol__FlexControlDelegation Protocol__FlexControlDelegation;
typedef struct _Protocol__FlexAgentReconfiguration Protocol__FlexAgentReconfiguration;
typedef struct _Protocol__FlexEchoRequestLatency Protocol__FlexEchoRequestLatency;
typedef struct _Protocol__FlexEchoReplyLatency Protocol__FlexEchoReplyLatency;
typedef struct _Protocol__FlexDisconnect Protocol__FlexDisconnect;


/* --- enums --- */

typedef enum _Protocol__FlexranDirection {
  /*
   *option allow_alias = true;
   */
  PROTOCOL__FLEXRAN_DIRECTION__NOT_SET = 0,
  PROTOCOL__FLEXRAN_DIRECTION__INITIATING_MESSAGE = 1,
  PROTOCOL__FLEXRAN_DIRECTION__SUCCESSFUL_OUTCOME = 2,
  PROTOCOL__FLEXRAN_DIRECTION__UNSUCCESSFUL_OUTCOME = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEXRAN_DIRECTION)
} Protocol__FlexranDirection;
typedef enum _Protocol__FlexranErr {
  /*
   *option allow_alias = true;
   * message errors
   */
  PROTOCOL__FLEXRAN_ERR__NO_ERR = 0,
  PROTOCOL__FLEXRAN_ERR__MSG_DEQUEUING = -1,
  PROTOCOL__FLEXRAN_ERR__MSG_ENQUEUING = -2,
  PROTOCOL__FLEXRAN_ERR__MSG_DECODING = -3,
  PROTOCOL__FLEXRAN_ERR__MSG_ENCODING = -4,
  PROTOCOL__FLEXRAN_ERR__MSG_BUILD = -5,
  PROTOCOL__FLEXRAN_ERR__MSG_NOT_SUPPORTED = -6,
  PROTOCOL__FLEXRAN_ERR__MSG_NOT_HANDLED = -7,
  PROTOCOL__FLEXRAN_ERR__MSG_NOT_VALIDATED = -8,
  PROTOCOL__FLEXRAN_ERR__MSG_OUT_DATED = -9,
  /*
   * other erros
   */
  PROTOCOL__FLEXRAN_ERR__UNEXPECTED = -100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEXRAN_ERR)
} Protocol__FlexranErr;
/*
 * Maintenance and discovery messages
 */
typedef enum _Protocol__FlexBsCapability {
  PROTOCOL__FLEX_BS_CAPABILITY__LOPHY = 0,
  PROTOCOL__FLEX_BS_CAPABILITY__HIPHY = 1,
  PROTOCOL__FLEX_BS_CAPABILITY__LOMAC = 2,
  PROTOCOL__FLEX_BS_CAPABILITY__HIMAC = 3,
  PROTOCOL__FLEX_BS_CAPABILITY__RLC = 4,
  PROTOCOL__FLEX_BS_CAPABILITY__PDCP = 5,
  PROTOCOL__FLEX_BS_CAPABILITY__SDAP = 6,
  PROTOCOL__FLEX_BS_CAPABILITY__RRC = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEX_BS_CAPABILITY)
} Protocol__FlexBsCapability;

/* --- messages --- */

typedef enum {
  PROTOCOL__FLEXRAN_MESSAGE__MSG__NOT_SET = 0,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_HELLO_MSG = 1,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_ECHO_REQUEST_MSG = 2,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_ECHO_REPLY_MSG = 3,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_STATS_REQUEST_MSG = 4,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_STATS_REPLY_MSG = 5,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_SF_TRIGGER_MSG = 6,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_UL_SR_INFO_MSG = 7,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_ENB_CONFIG_REQUEST_MSG = 8,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_ENB_CONFIG_REPLY_MSG = 9,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_UE_CONFIG_REQUEST_MSG = 10,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_UE_CONFIG_REPLY_MSG = 11,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_LC_CONFIG_REQUEST_MSG = 12,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_LC_CONFIG_REPLY_MSG = 13,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_DL_MAC_CONFIG_MSG = 14,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_UE_STATE_CHANGE_MSG = 15,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_CONTROL_DELEGATION_MSG = 16,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_AGENT_RECONFIGURATION_MSG = 17,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_RRC_TRIGGERING = 18,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_UL_MAC_CONFIG_MSG = 19,
  PROTOCOL__FLEXRAN_MESSAGE__MSG_DISCONNECT_MSG = 20
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEXRAN_MESSAGE__MSG)
} Protocol__FlexranMessage__MsgCase;

struct  _Protocol__FlexranMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg_dir;
  Protocol__FlexranDirection msg_dir;
  Protocol__FlexranMessage__MsgCase msg_case;
  union {
    Protocol__FlexHello *hello_msg;
    Protocol__FlexEchoRequest *echo_request_msg;
    Protocol__FlexEchoReply *echo_reply_msg;
    Protocol__FlexStatsRequest *stats_request_msg;
    Protocol__FlexStatsReply *stats_reply_msg;
    Protocol__FlexSfTrigger *sf_trigger_msg;
    Protocol__FlexUlSrInfo *ul_sr_info_msg;
    Protocol__FlexEnbConfigRequest *enb_config_request_msg;
    Protocol__FlexEnbConfigReply *enb_config_reply_msg;
    Protocol__FlexUeConfigRequest *ue_config_request_msg;
    Protocol__FlexUeConfigReply *ue_config_reply_msg;
    Protocol__FlexLcConfigRequest *lc_config_request_msg;
    Protocol__FlexLcConfigReply *lc_config_reply_msg;
    Protocol__FlexDlMacConfig *dl_mac_config_msg;
    Protocol__FlexUeStateChange *ue_state_change_msg;
    Protocol__FlexControlDelegation *control_delegation_msg;
    Protocol__FlexAgentReconfiguration *agent_reconfiguration_msg;
    Protocol__FlexRrcTriggering *rrc_triggering;
    Protocol__FlexUlMacConfig *ul_mac_config_msg;
    Protocol__FlexDisconnect *disconnect_msg;
  };
};
#define PROTOCOL__FLEXRAN_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flexran_message__descriptor) \
    , 0, PROTOCOL__FLEXRAN_DIRECTION__NOT_SET, PROTOCOL__FLEXRAN_MESSAGE__MSG__NOT_SET, {0} }


struct  _Protocol__FlexHello
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  /*
   * Unique id to distinguish the eNB
   */
  protobuf_c_boolean has_bs_id;
  uint64_t bs_id;
  size_t n_capabilities;
  Protocol__FlexBsCapability *capabilities;
};
#define PROTOCOL__FLEX_HELLO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_hello__descriptor) \
    , NULL, 0, 0, 0,NULL }


struct  _Protocol__FlexEchoRequest
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
};
#define PROTOCOL__FLEX_ECHO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_echo_request__descriptor) \
    , NULL }


struct  _Protocol__FlexEchoReply
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
};
#define PROTOCOL__FLEX_ECHO_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_echo_reply__descriptor) \
    , NULL }


typedef enum {
  PROTOCOL__FLEX_STATS_REQUEST__BODY__NOT_SET = 0,
  PROTOCOL__FLEX_STATS_REQUEST__BODY_COMPLETE_STATS_REQUEST = 3,
  PROTOCOL__FLEX_STATS_REQUEST__BODY_CELL_STATS_REQUEST = 4,
  PROTOCOL__FLEX_STATS_REQUEST__BODY_UE_STATS_REQUEST = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEX_STATS_REQUEST__BODY)
} Protocol__FlexStatsRequest__BodyCase;

struct  _Protocol__FlexStatsRequest
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  protobuf_c_boolean has_type;
  Protocol__FlexStatsType type;
  Protocol__FlexStatsRequest__BodyCase body_case;
  union {
    Protocol__FlexCompleteStatsRequest *complete_stats_request;
    Protocol__FlexCellStatsRequest *cell_stats_request;
    Protocol__FlexUeStatsRequest *ue_stats_request;
  };
};
#define PROTOCOL__FLEX_STATS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_stats_request__descriptor) \
    , NULL, 0, PROTOCOL__FLEX_STATS_TYPE__FLST_COMPLETE_STATS, PROTOCOL__FLEX_STATS_REQUEST__BODY__NOT_SET, {0} }


struct  _Protocol__FlexStatsReply
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  size_t n_ue_report;
  Protocol__FlexUeStatsReport **ue_report;
  size_t n_cell_report;
  Protocol__FlexCellStatsReport **cell_report;
};
#define PROTOCOL__FLEX_STATS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_stats_reply__descriptor) \
    , NULL, 0,NULL, 0,NULL }


struct  _Protocol__FlexSfTrigger
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  protobuf_c_boolean has_sfn_sf;
  uint32_t sfn_sf;
  size_t n_dl_info;
  Protocol__FlexDlInfo **dl_info;
  size_t n_ul_info;
  Protocol__FlexUlInfo **ul_info;
};
#define PROTOCOL__FLEX_SF_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_sf_trigger__descriptor) \
    , NULL, 0, 0, 0,NULL, 0,NULL }


struct  _Protocol__FlexUlSrInfo
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  protobuf_c_boolean has_sfn_sf;
  uint32_t sfn_sf;
  size_t n_rnti;
  uint32_t *rnti;
};
#define PROTOCOL__FLEX_UL_SR_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ul_sr_info__descriptor) \
    , NULL, 0, 0, 0,NULL }


/*
 * eNB configuration messages
 */
struct  _Protocol__FlexEnbConfigRequest
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
};
#define PROTOCOL__FLEX_ENB_CONFIG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_enb_config_request__descriptor) \
    , NULL }


struct  _Protocol__FlexEnbConfigReply
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  size_t n_cell_config;
  Protocol__FlexCellConfig **cell_config;
  protobuf_c_boolean has_device_spec;
  uint32_t device_spec;
};
#define PROTOCOL__FLEX_ENB_CONFIG_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_enb_config_reply__descriptor) \
    , NULL, 0,NULL, 0, 0 }


struct  _Protocol__FlexUeConfigRequest
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
};
#define PROTOCOL__FLEX_UE_CONFIG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ue_config_request__descriptor) \
    , NULL }


struct  _Protocol__FlexUeConfigReply
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  size_t n_ue_config;
  Protocol__FlexUeConfig **ue_config;
};
#define PROTOCOL__FLEX_UE_CONFIG_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ue_config_reply__descriptor) \
    , NULL, 0,NULL }


struct  _Protocol__FlexLcConfigRequest
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
};
#define PROTOCOL__FLEX_LC_CONFIG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_lc_config_request__descriptor) \
    , NULL }


struct  _Protocol__FlexLcConfigReply
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  size_t n_lc_ue_config;
  Protocol__FlexLcUeConfig **lc_ue_config;
};
#define PROTOCOL__FLEX_LC_CONFIG_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_lc_config_reply__descriptor) \
    , NULL, 0,NULL }


struct  _Protocol__FlexDlMacConfig
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  protobuf_c_boolean has_sfn_sf;
  uint32_t sfn_sf;
  size_t n_dl_ue_data;
  Protocol__FlexDlData **dl_ue_data;
  size_t n_dl_rar;
  Protocol__FlexDlRar **dl_rar;
  size_t n_dl_broadcast;
  Protocol__FlexDlBroadcast **dl_broadcast;
  /*
   * OFDM symbol count for each CC
   */
  size_t n_ofdm_sym;
  Protocol__FlexPdcchOfdmSymCount **ofdm_sym;
};
#define PROTOCOL__FLEX_DL_MAC_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_dl_mac_config__descriptor) \
    , NULL, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Protocol__FlexUlMacConfig
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  protobuf_c_boolean has_sfn_sf;
  uint32_t sfn_sf;
  size_t n_ul_ue_data;
  Protocol__FlexUlData **ul_ue_data;
};
#define PROTOCOL__FLEX_UL_MAC_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ul_mac_config__descriptor) \
    , NULL, 0, 0, 0,NULL }


struct  _Protocol__FlexRrcTriggering
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  char *rrc_trigger;
};
#define PROTOCOL__FLEX_RRC_TRIGGERING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_rrc_triggering__descriptor) \
    , NULL, NULL }


struct  _Protocol__FlexUeStateChange
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  /*
   * One of the FLUESC_* values
   */
  protobuf_c_boolean has_type;
  uint32_t type;
  /*
   * Body of the message (based on type)
   */
  Protocol__FlexUeConfig *config;
};
#define PROTOCOL__FLEX_UE_STATE_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_ue_state_change__descriptor) \
    , NULL, 0, 0, NULL }


struct  _Protocol__FlexControlDelegation
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  /*
   * Bitmap of FLCDT_* flags
   */
  protobuf_c_boolean has_delegation_type;
  uint32_t delegation_type;
  /*
   * Byte array of shared lib containing the delegated functions
   */
  protobuf_c_boolean has_payload;
  ProtobufCBinaryData payload;
  /*
   * The delegated functions names ordered based on bitmap flags
   */
  char *name;
};
#define PROTOCOL__FLEX_CONTROL_DELEGATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_control_delegation__descriptor) \
    , NULL, 0, 0, 0, {0,NULL}, NULL }


struct  _Protocol__FlexAgentReconfiguration
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
  /*
   * The policy changes using YAML syntax in string format    
   */
  char *policy;
};
#define PROTOCOL__FLEX_AGENT_RECONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_agent_reconfiguration__descriptor) \
    , NULL, NULL }


/*
 * Extensions of the echo request and reply
 * messages for carrying a latency value in ms
 */
struct  _Protocol__FlexEchoRequestLatency
{
  ProtobufCMessage base;
};
#define PROTOCOL__FLEX_ECHO_REQUEST_LATENCY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_echo_request_latency__descriptor) \
     }


struct  _Protocol__FlexEchoReplyLatency
{
  ProtobufCMessage base;
};
#define PROTOCOL__FLEX_ECHO_REPLY_LATENCY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_echo_reply_latency__descriptor) \
     }


struct  _Protocol__FlexDisconnect
{
  ProtobufCMessage base;
  Protocol__FlexHeader *header;
};
#define PROTOCOL__FLEX_DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flex_disconnect__descriptor) \
    , NULL }


/* Protocol__FlexranMessage methods */
void   protocol__flexran_message__init
                     (Protocol__FlexranMessage         *message);
size_t protocol__flexran_message__get_packed_size
                     (const Protocol__FlexranMessage   *message);
size_t protocol__flexran_message__pack
                     (const Protocol__FlexranMessage   *message,
                      uint8_t             *out);
size_t protocol__flexran_message__pack_to_buffer
                     (const Protocol__FlexranMessage   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexranMessage *
       protocol__flexran_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flexran_message__free_unpacked
                     (Protocol__FlexranMessage *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexHello methods */
void   protocol__flex_hello__init
                     (Protocol__FlexHello         *message);
size_t protocol__flex_hello__get_packed_size
                     (const Protocol__FlexHello   *message);
size_t protocol__flex_hello__pack
                     (const Protocol__FlexHello   *message,
                      uint8_t             *out);
size_t protocol__flex_hello__pack_to_buffer
                     (const Protocol__FlexHello   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexHello *
       protocol__flex_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_hello__free_unpacked
                     (Protocol__FlexHello *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEchoRequest methods */
void   protocol__flex_echo_request__init
                     (Protocol__FlexEchoRequest         *message);
size_t protocol__flex_echo_request__get_packed_size
                     (const Protocol__FlexEchoRequest   *message);
size_t protocol__flex_echo_request__pack
                     (const Protocol__FlexEchoRequest   *message,
                      uint8_t             *out);
size_t protocol__flex_echo_request__pack_to_buffer
                     (const Protocol__FlexEchoRequest   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEchoRequest *
       protocol__flex_echo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_echo_request__free_unpacked
                     (Protocol__FlexEchoRequest *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEchoReply methods */
void   protocol__flex_echo_reply__init
                     (Protocol__FlexEchoReply         *message);
size_t protocol__flex_echo_reply__get_packed_size
                     (const Protocol__FlexEchoReply   *message);
size_t protocol__flex_echo_reply__pack
                     (const Protocol__FlexEchoReply   *message,
                      uint8_t             *out);
size_t protocol__flex_echo_reply__pack_to_buffer
                     (const Protocol__FlexEchoReply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEchoReply *
       protocol__flex_echo_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_echo_reply__free_unpacked
                     (Protocol__FlexEchoReply *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexStatsRequest methods */
void   protocol__flex_stats_request__init
                     (Protocol__FlexStatsRequest         *message);
size_t protocol__flex_stats_request__get_packed_size
                     (const Protocol__FlexStatsRequest   *message);
size_t protocol__flex_stats_request__pack
                     (const Protocol__FlexStatsRequest   *message,
                      uint8_t             *out);
size_t protocol__flex_stats_request__pack_to_buffer
                     (const Protocol__FlexStatsRequest   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexStatsRequest *
       protocol__flex_stats_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_stats_request__free_unpacked
                     (Protocol__FlexStatsRequest *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexStatsReply methods */
void   protocol__flex_stats_reply__init
                     (Protocol__FlexStatsReply         *message);
size_t protocol__flex_stats_reply__get_packed_size
                     (const Protocol__FlexStatsReply   *message);
size_t protocol__flex_stats_reply__pack
                     (const Protocol__FlexStatsReply   *message,
                      uint8_t             *out);
size_t protocol__flex_stats_reply__pack_to_buffer
                     (const Protocol__FlexStatsReply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexStatsReply *
       protocol__flex_stats_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_stats_reply__free_unpacked
                     (Protocol__FlexStatsReply *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexSfTrigger methods */
void   protocol__flex_sf_trigger__init
                     (Protocol__FlexSfTrigger         *message);
size_t protocol__flex_sf_trigger__get_packed_size
                     (const Protocol__FlexSfTrigger   *message);
size_t protocol__flex_sf_trigger__pack
                     (const Protocol__FlexSfTrigger   *message,
                      uint8_t             *out);
size_t protocol__flex_sf_trigger__pack_to_buffer
                     (const Protocol__FlexSfTrigger   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexSfTrigger *
       protocol__flex_sf_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_sf_trigger__free_unpacked
                     (Protocol__FlexSfTrigger *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUlSrInfo methods */
void   protocol__flex_ul_sr_info__init
                     (Protocol__FlexUlSrInfo         *message);
size_t protocol__flex_ul_sr_info__get_packed_size
                     (const Protocol__FlexUlSrInfo   *message);
size_t protocol__flex_ul_sr_info__pack
                     (const Protocol__FlexUlSrInfo   *message,
                      uint8_t             *out);
size_t protocol__flex_ul_sr_info__pack_to_buffer
                     (const Protocol__FlexUlSrInfo   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUlSrInfo *
       protocol__flex_ul_sr_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ul_sr_info__free_unpacked
                     (Protocol__FlexUlSrInfo *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEnbConfigRequest methods */
void   protocol__flex_enb_config_request__init
                     (Protocol__FlexEnbConfigRequest         *message);
size_t protocol__flex_enb_config_request__get_packed_size
                     (const Protocol__FlexEnbConfigRequest   *message);
size_t protocol__flex_enb_config_request__pack
                     (const Protocol__FlexEnbConfigRequest   *message,
                      uint8_t             *out);
size_t protocol__flex_enb_config_request__pack_to_buffer
                     (const Protocol__FlexEnbConfigRequest   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEnbConfigRequest *
       protocol__flex_enb_config_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_enb_config_request__free_unpacked
                     (Protocol__FlexEnbConfigRequest *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEnbConfigReply methods */
void   protocol__flex_enb_config_reply__init
                     (Protocol__FlexEnbConfigReply         *message);
size_t protocol__flex_enb_config_reply__get_packed_size
                     (const Protocol__FlexEnbConfigReply   *message);
size_t protocol__flex_enb_config_reply__pack
                     (const Protocol__FlexEnbConfigReply   *message,
                      uint8_t             *out);
size_t protocol__flex_enb_config_reply__pack_to_buffer
                     (const Protocol__FlexEnbConfigReply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEnbConfigReply *
       protocol__flex_enb_config_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_enb_config_reply__free_unpacked
                     (Protocol__FlexEnbConfigReply *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUeConfigRequest methods */
void   protocol__flex_ue_config_request__init
                     (Protocol__FlexUeConfigRequest         *message);
size_t protocol__flex_ue_config_request__get_packed_size
                     (const Protocol__FlexUeConfigRequest   *message);
size_t protocol__flex_ue_config_request__pack
                     (const Protocol__FlexUeConfigRequest   *message,
                      uint8_t             *out);
size_t protocol__flex_ue_config_request__pack_to_buffer
                     (const Protocol__FlexUeConfigRequest   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUeConfigRequest *
       protocol__flex_ue_config_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ue_config_request__free_unpacked
                     (Protocol__FlexUeConfigRequest *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUeConfigReply methods */
void   protocol__flex_ue_config_reply__init
                     (Protocol__FlexUeConfigReply         *message);
size_t protocol__flex_ue_config_reply__get_packed_size
                     (const Protocol__FlexUeConfigReply   *message);
size_t protocol__flex_ue_config_reply__pack
                     (const Protocol__FlexUeConfigReply   *message,
                      uint8_t             *out);
size_t protocol__flex_ue_config_reply__pack_to_buffer
                     (const Protocol__FlexUeConfigReply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUeConfigReply *
       protocol__flex_ue_config_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ue_config_reply__free_unpacked
                     (Protocol__FlexUeConfigReply *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexLcConfigRequest methods */
void   protocol__flex_lc_config_request__init
                     (Protocol__FlexLcConfigRequest         *message);
size_t protocol__flex_lc_config_request__get_packed_size
                     (const Protocol__FlexLcConfigRequest   *message);
size_t protocol__flex_lc_config_request__pack
                     (const Protocol__FlexLcConfigRequest   *message,
                      uint8_t             *out);
size_t protocol__flex_lc_config_request__pack_to_buffer
                     (const Protocol__FlexLcConfigRequest   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexLcConfigRequest *
       protocol__flex_lc_config_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_lc_config_request__free_unpacked
                     (Protocol__FlexLcConfigRequest *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexLcConfigReply methods */
void   protocol__flex_lc_config_reply__init
                     (Protocol__FlexLcConfigReply         *message);
size_t protocol__flex_lc_config_reply__get_packed_size
                     (const Protocol__FlexLcConfigReply   *message);
size_t protocol__flex_lc_config_reply__pack
                     (const Protocol__FlexLcConfigReply   *message,
                      uint8_t             *out);
size_t protocol__flex_lc_config_reply__pack_to_buffer
                     (const Protocol__FlexLcConfigReply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexLcConfigReply *
       protocol__flex_lc_config_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_lc_config_reply__free_unpacked
                     (Protocol__FlexLcConfigReply *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexDlMacConfig methods */
void   protocol__flex_dl_mac_config__init
                     (Protocol__FlexDlMacConfig         *message);
size_t protocol__flex_dl_mac_config__get_packed_size
                     (const Protocol__FlexDlMacConfig   *message);
size_t protocol__flex_dl_mac_config__pack
                     (const Protocol__FlexDlMacConfig   *message,
                      uint8_t             *out);
size_t protocol__flex_dl_mac_config__pack_to_buffer
                     (const Protocol__FlexDlMacConfig   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexDlMacConfig *
       protocol__flex_dl_mac_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_dl_mac_config__free_unpacked
                     (Protocol__FlexDlMacConfig *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUlMacConfig methods */
void   protocol__flex_ul_mac_config__init
                     (Protocol__FlexUlMacConfig         *message);
size_t protocol__flex_ul_mac_config__get_packed_size
                     (const Protocol__FlexUlMacConfig   *message);
size_t protocol__flex_ul_mac_config__pack
                     (const Protocol__FlexUlMacConfig   *message,
                      uint8_t             *out);
size_t protocol__flex_ul_mac_config__pack_to_buffer
                     (const Protocol__FlexUlMacConfig   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUlMacConfig *
       protocol__flex_ul_mac_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ul_mac_config__free_unpacked
                     (Protocol__FlexUlMacConfig *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexRrcTriggering methods */
void   protocol__flex_rrc_triggering__init
                     (Protocol__FlexRrcTriggering         *message);
size_t protocol__flex_rrc_triggering__get_packed_size
                     (const Protocol__FlexRrcTriggering   *message);
size_t protocol__flex_rrc_triggering__pack
                     (const Protocol__FlexRrcTriggering   *message,
                      uint8_t             *out);
size_t protocol__flex_rrc_triggering__pack_to_buffer
                     (const Protocol__FlexRrcTriggering   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexRrcTriggering *
       protocol__flex_rrc_triggering__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_rrc_triggering__free_unpacked
                     (Protocol__FlexRrcTriggering *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexUeStateChange methods */
void   protocol__flex_ue_state_change__init
                     (Protocol__FlexUeStateChange         *message);
size_t protocol__flex_ue_state_change__get_packed_size
                     (const Protocol__FlexUeStateChange   *message);
size_t protocol__flex_ue_state_change__pack
                     (const Protocol__FlexUeStateChange   *message,
                      uint8_t             *out);
size_t protocol__flex_ue_state_change__pack_to_buffer
                     (const Protocol__FlexUeStateChange   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexUeStateChange *
       protocol__flex_ue_state_change__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_ue_state_change__free_unpacked
                     (Protocol__FlexUeStateChange *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexControlDelegation methods */
void   protocol__flex_control_delegation__init
                     (Protocol__FlexControlDelegation         *message);
size_t protocol__flex_control_delegation__get_packed_size
                     (const Protocol__FlexControlDelegation   *message);
size_t protocol__flex_control_delegation__pack
                     (const Protocol__FlexControlDelegation   *message,
                      uint8_t             *out);
size_t protocol__flex_control_delegation__pack_to_buffer
                     (const Protocol__FlexControlDelegation   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexControlDelegation *
       protocol__flex_control_delegation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_control_delegation__free_unpacked
                     (Protocol__FlexControlDelegation *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexAgentReconfiguration methods */
void   protocol__flex_agent_reconfiguration__init
                     (Protocol__FlexAgentReconfiguration         *message);
size_t protocol__flex_agent_reconfiguration__get_packed_size
                     (const Protocol__FlexAgentReconfiguration   *message);
size_t protocol__flex_agent_reconfiguration__pack
                     (const Protocol__FlexAgentReconfiguration   *message,
                      uint8_t             *out);
size_t protocol__flex_agent_reconfiguration__pack_to_buffer
                     (const Protocol__FlexAgentReconfiguration   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexAgentReconfiguration *
       protocol__flex_agent_reconfiguration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_agent_reconfiguration__free_unpacked
                     (Protocol__FlexAgentReconfiguration *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEchoRequestLatency methods */
void   protocol__flex_echo_request_latency__init
                     (Protocol__FlexEchoRequestLatency         *message);
size_t protocol__flex_echo_request_latency__get_packed_size
                     (const Protocol__FlexEchoRequestLatency   *message);
size_t protocol__flex_echo_request_latency__pack
                     (const Protocol__FlexEchoRequestLatency   *message,
                      uint8_t             *out);
size_t protocol__flex_echo_request_latency__pack_to_buffer
                     (const Protocol__FlexEchoRequestLatency   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEchoRequestLatency *
       protocol__flex_echo_request_latency__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_echo_request_latency__free_unpacked
                     (Protocol__FlexEchoRequestLatency *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexEchoReplyLatency methods */
void   protocol__flex_echo_reply_latency__init
                     (Protocol__FlexEchoReplyLatency         *message);
size_t protocol__flex_echo_reply_latency__get_packed_size
                     (const Protocol__FlexEchoReplyLatency   *message);
size_t protocol__flex_echo_reply_latency__pack
                     (const Protocol__FlexEchoReplyLatency   *message,
                      uint8_t             *out);
size_t protocol__flex_echo_reply_latency__pack_to_buffer
                     (const Protocol__FlexEchoReplyLatency   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexEchoReplyLatency *
       protocol__flex_echo_reply_latency__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_echo_reply_latency__free_unpacked
                     (Protocol__FlexEchoReplyLatency *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexDisconnect methods */
void   protocol__flex_disconnect__init
                     (Protocol__FlexDisconnect         *message);
size_t protocol__flex_disconnect__get_packed_size
                     (const Protocol__FlexDisconnect   *message);
size_t protocol__flex_disconnect__pack
                     (const Protocol__FlexDisconnect   *message,
                      uint8_t             *out);
size_t protocol__flex_disconnect__pack_to_buffer
                     (const Protocol__FlexDisconnect   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexDisconnect *
       protocol__flex_disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flex_disconnect__free_unpacked
                     (Protocol__FlexDisconnect *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__FlexranMessage_Closure)
                 (const Protocol__FlexranMessage *message,
                  void *closure_data);
typedef void (*Protocol__FlexHello_Closure)
                 (const Protocol__FlexHello *message,
                  void *closure_data);
typedef void (*Protocol__FlexEchoRequest_Closure)
                 (const Protocol__FlexEchoRequest *message,
                  void *closure_data);
typedef void (*Protocol__FlexEchoReply_Closure)
                 (const Protocol__FlexEchoReply *message,
                  void *closure_data);
typedef void (*Protocol__FlexStatsRequest_Closure)
                 (const Protocol__FlexStatsRequest *message,
                  void *closure_data);
typedef void (*Protocol__FlexStatsReply_Closure)
                 (const Protocol__FlexStatsReply *message,
                  void *closure_data);
typedef void (*Protocol__FlexSfTrigger_Closure)
                 (const Protocol__FlexSfTrigger *message,
                  void *closure_data);
typedef void (*Protocol__FlexUlSrInfo_Closure)
                 (const Protocol__FlexUlSrInfo *message,
                  void *closure_data);
typedef void (*Protocol__FlexEnbConfigRequest_Closure)
                 (const Protocol__FlexEnbConfigRequest *message,
                  void *closure_data);
typedef void (*Protocol__FlexEnbConfigReply_Closure)
                 (const Protocol__FlexEnbConfigReply *message,
                  void *closure_data);
typedef void (*Protocol__FlexUeConfigRequest_Closure)
                 (const Protocol__FlexUeConfigRequest *message,
                  void *closure_data);
typedef void (*Protocol__FlexUeConfigReply_Closure)
                 (const Protocol__FlexUeConfigReply *message,
                  void *closure_data);
typedef void (*Protocol__FlexLcConfigRequest_Closure)
                 (const Protocol__FlexLcConfigRequest *message,
                  void *closure_data);
typedef void (*Protocol__FlexLcConfigReply_Closure)
                 (const Protocol__FlexLcConfigReply *message,
                  void *closure_data);
typedef void (*Protocol__FlexDlMacConfig_Closure)
                 (const Protocol__FlexDlMacConfig *message,
                  void *closure_data);
typedef void (*Protocol__FlexUlMacConfig_Closure)
                 (const Protocol__FlexUlMacConfig *message,
                  void *closure_data);
typedef void (*Protocol__FlexRrcTriggering_Closure)
                 (const Protocol__FlexRrcTriggering *message,
                  void *closure_data);
typedef void (*Protocol__FlexUeStateChange_Closure)
                 (const Protocol__FlexUeStateChange *message,
                  void *closure_data);
typedef void (*Protocol__FlexControlDelegation_Closure)
                 (const Protocol__FlexControlDelegation *message,
                  void *closure_data);
typedef void (*Protocol__FlexAgentReconfiguration_Closure)
                 (const Protocol__FlexAgentReconfiguration *message,
                  void *closure_data);
typedef void (*Protocol__FlexEchoRequestLatency_Closure)
                 (const Protocol__FlexEchoRequestLatency *message,
                  void *closure_data);
typedef void (*Protocol__FlexEchoReplyLatency_Closure)
                 (const Protocol__FlexEchoReplyLatency *message,
                  void *closure_data);
typedef void (*Protocol__FlexDisconnect_Closure)
                 (const Protocol__FlexDisconnect *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    protocol__flexran_direction__descriptor;
extern const ProtobufCEnumDescriptor    protocol__flexran_err__descriptor;
extern const ProtobufCEnumDescriptor    protocol__flex_bs_capability__descriptor;
extern const ProtobufCMessageDescriptor protocol__flexran_message__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_hello__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_echo_request__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_echo_reply__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_stats_request__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_stats_reply__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_sf_trigger__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ul_sr_info__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_enb_config_request__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_enb_config_reply__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ue_config_request__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ue_config_reply__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_lc_config_request__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_lc_config_reply__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_dl_mac_config__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ul_mac_config__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_rrc_triggering__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_ue_state_change__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_control_delegation__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_agent_reconfiguration__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_echo_request_latency__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_echo_reply_latency__descriptor;
extern const ProtobufCMessageDescriptor protocol__flex_disconnect__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_flexran_2eproto__INCLUDED */
