/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: flexsplit.proto */

#ifndef PROTOBUF_C_flexsplit_2eproto__INCLUDED
#define PROTOBUF_C_flexsplit_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Protocol__FspHeader Protocol__FspHeader;
typedef struct _Protocol__F1uMessage Protocol__F1uMessage;
typedef struct _Protocol__FlexsplitMessage Protocol__FlexsplitMessage;
typedef struct _Protocol__FspCtxt Protocol__FspCtxt;
typedef struct _Protocol__FspRlcPdu Protocol__FspRlcPdu;
typedef struct _Protocol__FspRlcData Protocol__FspRlcData;
typedef struct _Protocol__FspHello Protocol__FspHello;
typedef struct _Protocol__FspEchoRequest Protocol__FspEchoRequest;
typedef struct _Protocol__FspEchoReply Protocol__FspEchoReply;
typedef struct _Protocol__FspRlcDataReq Protocol__FspRlcDataReq;
typedef struct _Protocol__FspRlcDataReqAck Protocol__FspRlcDataReqAck;
typedef struct _Protocol__FspPdcpDataInd Protocol__FspPdcpDataInd;
typedef struct _Protocol__FspPdcpDataIndAck Protocol__FspPdcpDataIndAck;
typedef struct _Protocol__DlDataHeader Protocol__DlDataHeader;
typedef struct _Protocol__DlUserData Protocol__DlUserData;
typedef struct _Protocol__DlDataDeliveryStatus Protocol__DlDataDeliveryStatus;


/* --- enums --- */

typedef enum _Protocol__FspType {
  /*
   * Discovery and maintenance messages
   */
  PROTOCOL__FSP_TYPE__FSPT_HELLO = 0,
  PROTOCOL__FSP_TYPE__FSPT_ECHO_REQUEST = 1,
  PROTOCOL__FSP_TYPE__FSPT_ECHO_REPLY = 2,
  PROTOCOL__FSP_TYPE__FSPT_RLC_DATA_REQ = 3,
  PROTOCOL__FSP_TYPE__FSPT_RLC_DATA_REQ_ACK = 4,
  PROTOCOL__FSP_TYPE__FSPT_PDCP_DATA_IND = 5,
  PROTOCOL__FSP_TYPE__FSPT_PDCP_DATA_IND_ACK = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FSP_TYPE)
} Protocol__FspType;
typedef enum _Protocol__F1uType {
  /*
   * Discovery and maintenance messages
   */
  PROTOCOL__F1U_TYPE__F1U_DL_DATA = 0,
  PROTOCOL__F1U_TYPE__F1U_DL_STATUS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__F1U_TYPE)
} Protocol__F1uType;
typedef enum _Protocol__FlexsplitDirection {
  /*
   *option allow_alias = true;
   */
  PROTOCOL__FLEXSPLIT_DIRECTION__NOT_SET = 0,
  PROTOCOL__FLEXSPLIT_DIRECTION__INITIATING_MESSAGE = 1,
  PROTOCOL__FLEXSPLIT_DIRECTION__SUCCESSFUL_OUTCOME = 2,
  PROTOCOL__FLEXSPLIT_DIRECTION__UNSUCCESSFUL_OUTCOME = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEXSPLIT_DIRECTION)
} Protocol__FlexsplitDirection;
typedef enum _Protocol__FlexsplitErr {
  /*
   * message errors
   */
  PROTOCOL__FLEXSPLIT_ERR__NO_ERR = 0,
  PROTOCOL__FLEXSPLIT_ERR__MSG_DEQUEUING = -1,
  PROTOCOL__FLEXSPLIT_ERR__MSG_ENQUEUING = -2,
  PROTOCOL__FLEXSPLIT_ERR__MSG_DECODING = -3,
  PROTOCOL__FLEXSPLIT_ERR__MSG_ENCODING = -4,
  PROTOCOL__FLEXSPLIT_ERR__MSG_BUILD = -5,
  PROTOCOL__FLEXSPLIT_ERR__MSG_NOT_SUPPORTED = -6,
  PROTOCOL__FLEXSPLIT_ERR__MSG_NOT_HANDLED = -7,
  PROTOCOL__FLEXSPLIT_ERR__MSG_NOT_VALIDATED = -8,
  PROTOCOL__FLEXSPLIT_ERR__MSG_OUT_DATED = -9,
  /*
   * other erros
   */
  PROTOCOL__FLEXSPLIT_ERR__UNEXPECTED = -100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEXSPLIT_ERR)
} Protocol__FlexsplitErr;

/* --- messages --- */

struct  _Protocol__FspHeader
{
  ProtobufCMessage base;
  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_xid;
  uint32_t xid;
};
#define PROTOCOL__FSP_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_header__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


typedef enum {
  PROTOCOL__F1U_MESSAGE__MSG__NOT_SET = 0,
  PROTOCOL__F1U_MESSAGE__MSG_DL_DATA = 1,
  PROTOCOL__F1U_MESSAGE__MSG_DL_STATUS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__F1U_MESSAGE__MSG)
} Protocol__F1uMessage__MsgCase;

struct  _Protocol__F1uMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg_dir;
  Protocol__FlexsplitDirection msg_dir;
  Protocol__F1uMessage__MsgCase msg_case;
  union {
    Protocol__DlUserData *dl_data;
    Protocol__DlDataDeliveryStatus *dl_status;
  };
};
#define PROTOCOL__F1U_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__f1u_message__descriptor) \
    , 0, PROTOCOL__FLEXSPLIT_DIRECTION__NOT_SET, PROTOCOL__F1U_MESSAGE__MSG__NOT_SET, {0} }


typedef enum {
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG__NOT_SET = 0,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_HELLO_MSG = 1,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_ECHO_REQUEST_MSG = 2,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_ECHO_REPLY_MSG = 3,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_DATA_REQ_MSG = 4,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_DATA_REQ_ACK = 5,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_DATA_IND_MSG = 6,
  PROTOCOL__FLEXSPLIT_MESSAGE__MSG_DATA_IND_ACK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL__FLEXSPLIT_MESSAGE__MSG)
} Protocol__FlexsplitMessage__MsgCase;

struct  _Protocol__FlexsplitMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg_dir;
  Protocol__FlexsplitDirection msg_dir;
  Protocol__FlexsplitMessage__MsgCase msg_case;
  union {
    Protocol__FspHello *hello_msg;
    Protocol__FspEchoRequest *echo_request_msg;
    Protocol__FspEchoReply *echo_reply_msg;
    Protocol__FspRlcDataReq *data_req_msg;
    Protocol__FspRlcDataReqAck *data_req_ack;
    Protocol__FspPdcpDataInd *data_ind_msg;
    Protocol__FspPdcpDataIndAck *data_ind_ack;
  };
};
#define PROTOCOL__FLEXSPLIT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__flexsplit_message__descriptor) \
    , 0, PROTOCOL__FLEXSPLIT_DIRECTION__NOT_SET, PROTOCOL__FLEXSPLIT_MESSAGE__MSG__NOT_SET, {0} }


struct  _Protocol__FspCtxt
{
  ProtobufCMessage base;
  protobuf_c_boolean has_fsp_mod_id;
  uint32_t fsp_mod_id;
  protobuf_c_boolean has_fsp_enb_flag;
  protobuf_c_boolean fsp_enb_flag;
  protobuf_c_boolean has_fsp_instance;
  uint32_t fsp_instance;
  protobuf_c_boolean has_fsp_rnti;
  uint32_t fsp_rnti;
  protobuf_c_boolean has_fsp_frame;
  uint32_t fsp_frame;
  protobuf_c_boolean has_fsp_subframe;
  uint32_t fsp_subframe;
  protobuf_c_boolean has_fsp_enb_index;
  uint32_t fsp_enb_index;
};
#define PROTOCOL__FSP_CTXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_ctxt__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Protocol__FspRlcPdu
{
  ProtobufCMessage base;
  /*
   * Maximum PDU to be transfered
   */
  protobuf_c_boolean has_fsp_pdu_data;
  ProtobufCBinaryData fsp_pdu_data;
};
#define PROTOCOL__FSP_RLC_PDU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_rlc_pdu__descriptor) \
    , 0, {0,NULL} }


struct  _Protocol__FspRlcData
{
  ProtobufCMessage base;
  Protocol__FspCtxt *fsp_ctxt;
  protobuf_c_boolean has_fsp_srb_flag;
  protobuf_c_boolean fsp_srb_flag;
  protobuf_c_boolean has_fsp_mbms_flag;
  protobuf_c_boolean fsp_mbms_flag;
  protobuf_c_boolean has_fsp_rb_id;
  uint32_t fsp_rb_id;
  protobuf_c_boolean has_fsp_muip;
  uint32_t fsp_muip;
  protobuf_c_boolean has_fsp_confirm;
  uint32_t fsp_confirm;
  protobuf_c_boolean has_fsp_sdu_buffer_size;
  int32_t fsp_sdu_buffer_size;
  Protocol__FspRlcPdu *fsp_pdu;
};
#define PROTOCOL__FSP_RLC_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_rlc_data__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  _Protocol__FspHello
{
  ProtobufCMessage base;
  Protocol__FspHeader *header;
};
#define PROTOCOL__FSP_HELLO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_hello__descriptor) \
    , NULL }


struct  _Protocol__FspEchoRequest
{
  ProtobufCMessage base;
  /*
   *        extensions 100 to 199;
   */
  Protocol__FspHeader *header;
};
#define PROTOCOL__FSP_ECHO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_echo_request__descriptor) \
    , NULL }


struct  _Protocol__FspEchoReply
{
  ProtobufCMessage base;
  /*
   *        extensions 100 to 199;
   */
  Protocol__FspHeader *header;
};
#define PROTOCOL__FSP_ECHO_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_echo_reply__descriptor) \
    , NULL }


struct  _Protocol__FspRlcDataReq
{
  ProtobufCMessage base;
  Protocol__FspHeader *header;
  protobuf_c_boolean has_enb_id;
  uint32_t enb_id;
  Protocol__FspRlcData *pdcp_data;
};
#define PROTOCOL__FSP_RLC_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_rlc_data_req__descriptor) \
    , NULL, 0, 0, NULL }


struct  _Protocol__FspRlcDataReqAck
{
  ProtobufCMessage base;
  Protocol__FspHeader *header;
  protobuf_c_boolean has_result;
  uint32_t result;
};
#define PROTOCOL__FSP_RLC_DATA_REQ_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_rlc_data_req_ack__descriptor) \
    , NULL, 0, 0 }


struct  _Protocol__FspPdcpDataInd
{
  ProtobufCMessage base;
  Protocol__FspHeader *header;
  protobuf_c_boolean has_enb_id;
  uint32_t enb_id;
  Protocol__FspRlcData *rlc_data;
};
#define PROTOCOL__FSP_PDCP_DATA_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_pdcp_data_ind__descriptor) \
    , NULL, 0, 0, NULL }


struct  _Protocol__FspPdcpDataIndAck
{
  ProtobufCMessage base;
  Protocol__FspHeader *header;
  protobuf_c_boolean has_result;
  uint32_t result;
};
#define PROTOCOL__FSP_PDCP_DATA_IND_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__fsp_pdcp_data_ind_ack__descriptor) \
    , NULL, 0, 0 }


struct  _Protocol__DlDataHeader
{
  ProtobufCMessage base;
  uint32_t fields;
};
#define PROTOCOL__DL_DATA_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__dl_data_header__descriptor) \
    , 0 }


struct  _Protocol__DlUserData
{
  ProtobufCMessage base;
  Protocol__DlDataHeader *header;
  ProtobufCBinaryData pdu;
  uint32_t frame;
  uint32_t subframe;
  uint32_t rnti;
};
#define PROTOCOL__DL_USER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__dl_user_data__descriptor) \
    , NULL, {0,NULL}, 0, 0, 0 }


struct  _Protocol__DlDataDeliveryStatus
{
  ProtobufCMessage base;
  Protocol__DlDataHeader *header;
  ProtobufCBinaryData pdu;
  uint32_t frame;
  uint32_t subframe;
  uint32_t rnti;
};
#define PROTOCOL__DL_DATA_DELIVERY_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__dl_data_delivery_status__descriptor) \
    , NULL, {0,NULL}, 0, 0, 0 }


/* Protocol__FspHeader methods */
void   protocol__fsp_header__init
                     (Protocol__FspHeader         *message);
size_t protocol__fsp_header__get_packed_size
                     (const Protocol__FspHeader   *message);
size_t protocol__fsp_header__pack
                     (const Protocol__FspHeader   *message,
                      uint8_t             *out);
size_t protocol__fsp_header__pack_to_buffer
                     (const Protocol__FspHeader   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspHeader *
       protocol__fsp_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_header__free_unpacked
                     (Protocol__FspHeader *message,
                      ProtobufCAllocator *allocator);
/* Protocol__F1uMessage methods */
void   protocol__f1u_message__init
                     (Protocol__F1uMessage         *message);
size_t protocol__f1u_message__get_packed_size
                     (const Protocol__F1uMessage   *message);
size_t protocol__f1u_message__pack
                     (const Protocol__F1uMessage   *message,
                      uint8_t             *out);
size_t protocol__f1u_message__pack_to_buffer
                     (const Protocol__F1uMessage   *message,
                      ProtobufCBuffer     *buffer);
Protocol__F1uMessage *
       protocol__f1u_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__f1u_message__free_unpacked
                     (Protocol__F1uMessage *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FlexsplitMessage methods */
void   protocol__flexsplit_message__init
                     (Protocol__FlexsplitMessage         *message);
size_t protocol__flexsplit_message__get_packed_size
                     (const Protocol__FlexsplitMessage   *message);
size_t protocol__flexsplit_message__pack
                     (const Protocol__FlexsplitMessage   *message,
                      uint8_t             *out);
size_t protocol__flexsplit_message__pack_to_buffer
                     (const Protocol__FlexsplitMessage   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FlexsplitMessage *
       protocol__flexsplit_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__flexsplit_message__free_unpacked
                     (Protocol__FlexsplitMessage *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspCtxt methods */
void   protocol__fsp_ctxt__init
                     (Protocol__FspCtxt         *message);
size_t protocol__fsp_ctxt__get_packed_size
                     (const Protocol__FspCtxt   *message);
size_t protocol__fsp_ctxt__pack
                     (const Protocol__FspCtxt   *message,
                      uint8_t             *out);
size_t protocol__fsp_ctxt__pack_to_buffer
                     (const Protocol__FspCtxt   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspCtxt *
       protocol__fsp_ctxt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_ctxt__free_unpacked
                     (Protocol__FspCtxt *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspRlcPdu methods */
void   protocol__fsp_rlc_pdu__init
                     (Protocol__FspRlcPdu         *message);
size_t protocol__fsp_rlc_pdu__get_packed_size
                     (const Protocol__FspRlcPdu   *message);
size_t protocol__fsp_rlc_pdu__pack
                     (const Protocol__FspRlcPdu   *message,
                      uint8_t             *out);
size_t protocol__fsp_rlc_pdu__pack_to_buffer
                     (const Protocol__FspRlcPdu   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspRlcPdu *
       protocol__fsp_rlc_pdu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_rlc_pdu__free_unpacked
                     (Protocol__FspRlcPdu *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspRlcData methods */
void   protocol__fsp_rlc_data__init
                     (Protocol__FspRlcData         *message);
size_t protocol__fsp_rlc_data__get_packed_size
                     (const Protocol__FspRlcData   *message);
size_t protocol__fsp_rlc_data__pack
                     (const Protocol__FspRlcData   *message,
                      uint8_t             *out);
size_t protocol__fsp_rlc_data__pack_to_buffer
                     (const Protocol__FspRlcData   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspRlcData *
       protocol__fsp_rlc_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_rlc_data__free_unpacked
                     (Protocol__FspRlcData *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspHello methods */
void   protocol__fsp_hello__init
                     (Protocol__FspHello         *message);
size_t protocol__fsp_hello__get_packed_size
                     (const Protocol__FspHello   *message);
size_t protocol__fsp_hello__pack
                     (const Protocol__FspHello   *message,
                      uint8_t             *out);
size_t protocol__fsp_hello__pack_to_buffer
                     (const Protocol__FspHello   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspHello *
       protocol__fsp_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_hello__free_unpacked
                     (Protocol__FspHello *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspEchoRequest methods */
void   protocol__fsp_echo_request__init
                     (Protocol__FspEchoRequest         *message);
size_t protocol__fsp_echo_request__get_packed_size
                     (const Protocol__FspEchoRequest   *message);
size_t protocol__fsp_echo_request__pack
                     (const Protocol__FspEchoRequest   *message,
                      uint8_t             *out);
size_t protocol__fsp_echo_request__pack_to_buffer
                     (const Protocol__FspEchoRequest   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspEchoRequest *
       protocol__fsp_echo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_echo_request__free_unpacked
                     (Protocol__FspEchoRequest *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspEchoReply methods */
void   protocol__fsp_echo_reply__init
                     (Protocol__FspEchoReply         *message);
size_t protocol__fsp_echo_reply__get_packed_size
                     (const Protocol__FspEchoReply   *message);
size_t protocol__fsp_echo_reply__pack
                     (const Protocol__FspEchoReply   *message,
                      uint8_t             *out);
size_t protocol__fsp_echo_reply__pack_to_buffer
                     (const Protocol__FspEchoReply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspEchoReply *
       protocol__fsp_echo_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_echo_reply__free_unpacked
                     (Protocol__FspEchoReply *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspRlcDataReq methods */
void   protocol__fsp_rlc_data_req__init
                     (Protocol__FspRlcDataReq         *message);
size_t protocol__fsp_rlc_data_req__get_packed_size
                     (const Protocol__FspRlcDataReq   *message);
size_t protocol__fsp_rlc_data_req__pack
                     (const Protocol__FspRlcDataReq   *message,
                      uint8_t             *out);
size_t protocol__fsp_rlc_data_req__pack_to_buffer
                     (const Protocol__FspRlcDataReq   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspRlcDataReq *
       protocol__fsp_rlc_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_rlc_data_req__free_unpacked
                     (Protocol__FspRlcDataReq *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspRlcDataReqAck methods */
void   protocol__fsp_rlc_data_req_ack__init
                     (Protocol__FspRlcDataReqAck         *message);
size_t protocol__fsp_rlc_data_req_ack__get_packed_size
                     (const Protocol__FspRlcDataReqAck   *message);
size_t protocol__fsp_rlc_data_req_ack__pack
                     (const Protocol__FspRlcDataReqAck   *message,
                      uint8_t             *out);
size_t protocol__fsp_rlc_data_req_ack__pack_to_buffer
                     (const Protocol__FspRlcDataReqAck   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspRlcDataReqAck *
       protocol__fsp_rlc_data_req_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_rlc_data_req_ack__free_unpacked
                     (Protocol__FspRlcDataReqAck *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspPdcpDataInd methods */
void   protocol__fsp_pdcp_data_ind__init
                     (Protocol__FspPdcpDataInd         *message);
size_t protocol__fsp_pdcp_data_ind__get_packed_size
                     (const Protocol__FspPdcpDataInd   *message);
size_t protocol__fsp_pdcp_data_ind__pack
                     (const Protocol__FspPdcpDataInd   *message,
                      uint8_t             *out);
size_t protocol__fsp_pdcp_data_ind__pack_to_buffer
                     (const Protocol__FspPdcpDataInd   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspPdcpDataInd *
       protocol__fsp_pdcp_data_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_pdcp_data_ind__free_unpacked
                     (Protocol__FspPdcpDataInd *message,
                      ProtobufCAllocator *allocator);
/* Protocol__FspPdcpDataIndAck methods */
void   protocol__fsp_pdcp_data_ind_ack__init
                     (Protocol__FspPdcpDataIndAck         *message);
size_t protocol__fsp_pdcp_data_ind_ack__get_packed_size
                     (const Protocol__FspPdcpDataIndAck   *message);
size_t protocol__fsp_pdcp_data_ind_ack__pack
                     (const Protocol__FspPdcpDataIndAck   *message,
                      uint8_t             *out);
size_t protocol__fsp_pdcp_data_ind_ack__pack_to_buffer
                     (const Protocol__FspPdcpDataIndAck   *message,
                      ProtobufCBuffer     *buffer);
Protocol__FspPdcpDataIndAck *
       protocol__fsp_pdcp_data_ind_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__fsp_pdcp_data_ind_ack__free_unpacked
                     (Protocol__FspPdcpDataIndAck *message,
                      ProtobufCAllocator *allocator);
/* Protocol__DlDataHeader methods */
void   protocol__dl_data_header__init
                     (Protocol__DlDataHeader         *message);
size_t protocol__dl_data_header__get_packed_size
                     (const Protocol__DlDataHeader   *message);
size_t protocol__dl_data_header__pack
                     (const Protocol__DlDataHeader   *message,
                      uint8_t             *out);
size_t protocol__dl_data_header__pack_to_buffer
                     (const Protocol__DlDataHeader   *message,
                      ProtobufCBuffer     *buffer);
Protocol__DlDataHeader *
       protocol__dl_data_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__dl_data_header__free_unpacked
                     (Protocol__DlDataHeader *message,
                      ProtobufCAllocator *allocator);
/* Protocol__DlUserData methods */
void   protocol__dl_user_data__init
                     (Protocol__DlUserData         *message);
size_t protocol__dl_user_data__get_packed_size
                     (const Protocol__DlUserData   *message);
size_t protocol__dl_user_data__pack
                     (const Protocol__DlUserData   *message,
                      uint8_t             *out);
size_t protocol__dl_user_data__pack_to_buffer
                     (const Protocol__DlUserData   *message,
                      ProtobufCBuffer     *buffer);
Protocol__DlUserData *
       protocol__dl_user_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__dl_user_data__free_unpacked
                     (Protocol__DlUserData *message,
                      ProtobufCAllocator *allocator);
/* Protocol__DlDataDeliveryStatus methods */
void   protocol__dl_data_delivery_status__init
                     (Protocol__DlDataDeliveryStatus         *message);
size_t protocol__dl_data_delivery_status__get_packed_size
                     (const Protocol__DlDataDeliveryStatus   *message);
size_t protocol__dl_data_delivery_status__pack
                     (const Protocol__DlDataDeliveryStatus   *message,
                      uint8_t             *out);
size_t protocol__dl_data_delivery_status__pack_to_buffer
                     (const Protocol__DlDataDeliveryStatus   *message,
                      ProtobufCBuffer     *buffer);
Protocol__DlDataDeliveryStatus *
       protocol__dl_data_delivery_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__dl_data_delivery_status__free_unpacked
                     (Protocol__DlDataDeliveryStatus *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__FspHeader_Closure)
                 (const Protocol__FspHeader *message,
                  void *closure_data);
typedef void (*Protocol__F1uMessage_Closure)
                 (const Protocol__F1uMessage *message,
                  void *closure_data);
typedef void (*Protocol__FlexsplitMessage_Closure)
                 (const Protocol__FlexsplitMessage *message,
                  void *closure_data);
typedef void (*Protocol__FspCtxt_Closure)
                 (const Protocol__FspCtxt *message,
                  void *closure_data);
typedef void (*Protocol__FspRlcPdu_Closure)
                 (const Protocol__FspRlcPdu *message,
                  void *closure_data);
typedef void (*Protocol__FspRlcData_Closure)
                 (const Protocol__FspRlcData *message,
                  void *closure_data);
typedef void (*Protocol__FspHello_Closure)
                 (const Protocol__FspHello *message,
                  void *closure_data);
typedef void (*Protocol__FspEchoRequest_Closure)
                 (const Protocol__FspEchoRequest *message,
                  void *closure_data);
typedef void (*Protocol__FspEchoReply_Closure)
                 (const Protocol__FspEchoReply *message,
                  void *closure_data);
typedef void (*Protocol__FspRlcDataReq_Closure)
                 (const Protocol__FspRlcDataReq *message,
                  void *closure_data);
typedef void (*Protocol__FspRlcDataReqAck_Closure)
                 (const Protocol__FspRlcDataReqAck *message,
                  void *closure_data);
typedef void (*Protocol__FspPdcpDataInd_Closure)
                 (const Protocol__FspPdcpDataInd *message,
                  void *closure_data);
typedef void (*Protocol__FspPdcpDataIndAck_Closure)
                 (const Protocol__FspPdcpDataIndAck *message,
                  void *closure_data);
typedef void (*Protocol__DlDataHeader_Closure)
                 (const Protocol__DlDataHeader *message,
                  void *closure_data);
typedef void (*Protocol__DlUserData_Closure)
                 (const Protocol__DlUserData *message,
                  void *closure_data);
typedef void (*Protocol__DlDataDeliveryStatus_Closure)
                 (const Protocol__DlDataDeliveryStatus *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    protocol__fsp_type__descriptor;
extern const ProtobufCEnumDescriptor    protocol__f1u_type__descriptor;
extern const ProtobufCEnumDescriptor    protocol__flexsplit_direction__descriptor;
extern const ProtobufCEnumDescriptor    protocol__flexsplit_err__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_header__descriptor;
extern const ProtobufCMessageDescriptor protocol__f1u_message__descriptor;
extern const ProtobufCMessageDescriptor protocol__flexsplit_message__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_ctxt__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_rlc_pdu__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_rlc_data__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_hello__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_echo_request__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_echo_reply__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_rlc_data_req__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_rlc_data_req_ack__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_pdcp_data_ind__descriptor;
extern const ProtobufCMessageDescriptor protocol__fsp_pdcp_data_ind_ack__descriptor;
extern const ProtobufCMessageDescriptor protocol__dl_data_header__descriptor;
extern const ProtobufCMessageDescriptor protocol__dl_user_data__descriptor;
extern const ProtobufCMessageDescriptor protocol__dl_data_delivery_status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_flexsplit_2eproto__INCLUDED */
